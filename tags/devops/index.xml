<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>DevOps on Scott Obert</title><link>https://scottobert.com/tags/devops/</link><description>Recent content in DevOps on Scott Obert</description><generator>Hugo</generator><language>en</language><copyright>&amp;copy;2022 Scott Obert</copyright><lastBuildDate>Fri, 13 Jun 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://scottobert.com/tags/devops/index.xml" rel="self" type="application/rss+xml"/><item><title>Infrastructure as Code: Advanced CloudFormation Patterns</title><link>https://scottobert.com/posts/advanced-cloudformation-patterns/</link><pubDate>Fri, 13 Jun 2025 00:00:00 +0000</pubDate><guid>https://scottobert.com/posts/advanced-cloudformation-patterns/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>Infrastructure as Code (IaC) has revolutionized how we manage cloud resources, and AWS CloudFormation stands at the forefront of this transformation. While basic templates serve well for simple deployments, advanced patterns can significantly enhance maintainability, reusability, and scalability of your infrastructure code. This guide explores sophisticated CloudFormation patterns drawn from real-world experience.&lt;/p>
&lt;h2 id="custom-resources-beyond-standard-aws-resources">Custom Resources: Beyond Standard AWS Resources&lt;/h2>
&lt;p>CloudFormation&amp;rsquo;s custom resources extend its capabilities beyond built-in AWS resource types. Through Lambda-backed custom resources, you can integrate external services, implement complex validation logic, or manage resources that CloudFormation doesn&amp;rsquo;t natively support. Consider this pattern for managing DNS records in external providers or implementing custom validation rules for your infrastructure.&lt;/p></description></item><item><title>AWS CDK Infrastructure as Code with TypeScript</title><link>https://scottobert.com/posts/aws-cdk-typescript/</link><pubDate>Sun, 23 Jul 2023 10:00:00 -0700</pubDate><guid>https://scottobert.com/posts/aws-cdk-typescript/</guid><description>&lt;p>Managing cloud infrastructure through code brings numerous advantages over manual configuration, including version control, reproducibility, and automated deployment pipelines. In this post, we&amp;rsquo;ll explore how to use AWS CDK (Cloud Development Kit) with TypeScript to create, manage, and deploy serverless applications with infrastructure that&amp;rsquo;s as maintainable and type-safe as your application code.&lt;/p>
&lt;h2 id="why-cdk-with-typescript">Why CDK with TypeScript?&lt;/h2>
&lt;p>AWS CDK offers a compelling alternative to traditional infrastructure tools by allowing you to define cloud resources using familiar programming languages. When combined with TypeScript, CDK provides compile-time type checking, intelligent code completion, and the ability to create reusable, composable infrastructure components.&lt;/p></description></item><item><title>Secrets Management Strategies for Cloud-Native Applications</title><link>https://scottobert.com/posts/secrets-management-strategies/</link><pubDate>Sat, 27 Jul 2019 11:00:00 -0700</pubDate><guid>https://scottobert.com/posts/secrets-management-strategies/</guid><description>&lt;p>The proliferation of microservices and distributed architectures has dramatically increased the complexity of managing sensitive information in cloud-native applications. Database credentials, API keys, encryption keys, and other secrets must be securely stored, distributed, and rotated across potentially hundreds of services and environments. Traditional approaches of hardcoding secrets or storing them in configuration files are not only insecure but fundamentally incompatible with the dynamic nature of cloud-native deployments.&lt;/p>
&lt;p>Modern secrets management requires a comprehensive strategy that addresses the entire lifecycle of sensitive information, from generation and distribution to rotation and revocation. This strategy must account for the ephemeral nature of cloud-native workloads, the need for automated operations, and the security requirements of handling sensitive data across network boundaries.&lt;/p></description></item></channel></rss>