<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Code Quality on Scott Obert</title><link>https://scottobert.github.io/tags/code-quality/</link><description>Recent content in Code Quality on Scott Obert</description><generator>Hugo</generator><language>en</language><copyright>&amp;copy;2022 Scott Obert</copyright><lastBuildDate>Sun, 19 Dec 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://scottobert.github.io/tags/code-quality/index.xml" rel="self" type="application/rss+xml"/><item><title>Technical Debt Management in Growing Codebases: Strategies for Sustainable Development</title><link>https://scottobert.github.io/posts/technical-debt-management-growing-codebases/</link><pubDate>Sun, 19 Dec 2021 00:00:00 +0000</pubDate><guid>https://scottobert.github.io/posts/technical-debt-management-growing-codebases/</guid><description>&lt;h2 id="introduction">Introduction&lt;/h2>
&lt;p>In our Modern Development Practices series, we&amp;rsquo;ve explored test-driven development, code quality gates, API design patterns, microservices communication, database design, and performance testing. Today, we conclude with technical debt management â€“ the critical practice that determines whether your codebase remains maintainable and scalable as it grows.&lt;/p>
&lt;p>Technical debt accumulates naturally in all software projects. The key is not to eliminate it entirely (which is impossible) but to manage it strategically, making conscious decisions about when to incur debt and when to pay it down.&lt;/p></description></item><item><title>Code Quality Gates: Automated Standards Enforcement</title><link>https://scottobert.github.io/posts/code-quality-gates-automated-standards-enforcement/</link><pubDate>Sun, 05 Sep 2021 10:00:00 -0700</pubDate><guid>https://scottobert.github.io/posts/code-quality-gates-automated-standards-enforcement/</guid><description>&lt;p>Code quality gates serve as automated checkpoints that prevent substandard code from progressing through your development pipeline. When implemented effectively, they maintain consistent standards across teams while accelerating development by catching issues early and reducing manual review overhead.&lt;/p>
&lt;h2 id="understanding-quality-gates">Understanding Quality Gates&lt;/h2>
&lt;p>Quality gates are automated checks that evaluate code against predefined criteria before allowing it to proceed to the next stage of development. Unlike simple linting, quality gates encompass comprehensive analysis including code coverage, complexity metrics, security vulnerabilities, and architectural compliance.&lt;/p></description></item></channel></rss>