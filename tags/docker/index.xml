<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Docker on Scott Obert</title><link>https://scottobert.github.io/tags/docker/</link><description>Recent content in Docker on Scott Obert</description><generator>Hugo</generator><language>en</language><copyright>&amp;copy;2022 Scott Obert</copyright><lastBuildDate>Sat, 07 Sep 2019 10:00:00 -0700</lastBuildDate><atom:link href="https://scottobert.github.io/tags/docker/index.xml" rel="self" type="application/rss+xml"/><item><title>Container and Serverless Security: Protecting Ephemeral Workloads</title><link>https://scottobert.github.io/posts/container-serverless-security/</link><pubDate>Sat, 07 Sep 2019 10:00:00 -0700</pubDate><guid>https://scottobert.github.io/posts/container-serverless-security/</guid><description>&lt;p>The ephemeral nature of containers and serverless functions introduces unique security challenges that traditional application security models weren&amp;rsquo;t designed to address. Unlike long-running virtual machines or physical servers, these workloads exist for minutes, hours, or even seconds, making traditional security monitoring and patching strategies ineffective. This fundamental shift requires a new approach to security that embraces the transient nature of these workloads while maintaining robust protection against evolving threats.&lt;/p>
&lt;p>Container and serverless security operates on the principle that protection must be built into the deployment pipeline rather than applied after deployment. This shift-left approach ensures that security controls are embedded throughout the development lifecycle, from image creation to runtime execution. The challenge lies in balancing security rigor with the speed and agility that containerized and serverless architectures promise to deliver.&lt;/p></description></item></channel></rss>