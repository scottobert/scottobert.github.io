<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>TDD on Scott Obert</title><link>https://scottobert.com/tags/tdd/</link><description>Recent content in TDD on Scott Obert</description><generator>Hugo</generator><language>en</language><copyright>&amp;copy;2022 Scott Obert</copyright><lastBuildDate>Sun, 15 Aug 2021 09:00:00 -0700</lastBuildDate><atom:link href="https://scottobert.com/tags/tdd/index.xml" rel="self" type="application/rss+xml"/><item><title>Test-Driven Development in TypeScript: Beyond the Basics</title><link>https://scottobert.com/posts/test-driven-development-typescript-beyond-basics/</link><pubDate>Sun, 15 Aug 2021 09:00:00 -0700</pubDate><guid>https://scottobert.com/posts/test-driven-development-typescript-beyond-basics/</guid><description>&lt;p>Test-Driven Development (TDD) has evolved significantly with modern TypeScript tooling and frameworks. While most developers understand the basic red-green-refactor cycle, mastering TDD in TypeScript requires understanding advanced patterns, effective mocking strategies, and leveraging the type system for better test design.&lt;/p>
&lt;h2 id="beyond-basic-tdd-advanced-patterns">Beyond Basic TDD: Advanced Patterns&lt;/h2>
&lt;h3 id="type-driven-test-design">Type-Driven Test Design&lt;/h3>
&lt;p>TypeScript&amp;rsquo;s type system provides unique opportunities to improve test design. Instead of just testing implementation details, we can use types to guide our test structure and ensure comprehensive coverage:&lt;/p></description></item></channel></rss>