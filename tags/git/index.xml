<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Git on Scott Obert</title><link>https://scottobert.com/tags/git/</link><description>Recent content in Git on Scott Obert</description><generator>Hugo</generator><language>en</language><copyright>&amp;copy;2022 Scott Obert</copyright><lastBuildDate>Wed, 11 Jun 2025 10:00:00 -0700</lastBuildDate><atom:link href="https://scottobert.com/tags/git/index.xml" rel="self" type="application/rss+xml"/><item><title>Reverting Git Commits Safely: Undoing Changes Without Losing History</title><link>https://scottobert.com/posts/reverting-git-commits-safely/</link><pubDate>Wed, 11 Jun 2025 10:00:00 -0700</pubDate><guid>https://scottobert.com/posts/reverting-git-commits-safely/</guid><description>&lt;p>When working on complex projects, you&amp;rsquo;ll inevitably encounter situations where you need to undo changes from a specific commit that&amp;rsquo;s buried several commits back in your history. Recently, I faced this exact scenario when commit &lt;code>1d814e5&lt;/code> needed to be reverted from our development branch, but it wasn&amp;rsquo;t the most recent commit. This post explores the safest and most effective ways to handle this situation.&lt;/p>
&lt;h2 id="the-challenge">The Challenge&lt;/h2>
&lt;p>Looking at a typical git reflog, you might see something like this:&lt;/p></description></item></channel></rss>