[{"categories":["Cloud Computing","Architecture and Design"],"content":"Modern serverless architectures often require connecting multiple AWS Lambda functions. Two common patterns are direct Lambda-to-Lambda invocation and chaining via Amazon SNS. This post explains when to use each, with diagrams, CloudFormation templates, and TypeScript code for both approaches.\nWhen …","href":"https://scottobert.com/posts/lambda-to-lambda-vs-sns-chaining/","series":"AWS and Typescript","summary":"\u003cp\u003eModern serverless architectures often require connecting multiple AWS Lambda functions. Two common patterns are direct Lambda-to-Lambda invocation and chaining via Amazon SNS. This post explains when to use each, with diagrams, CloudFormation templates, and TypeScript code for both approaches.\u003c/p\u003e\n\u003ch2 id=\"when-to-use-each-pattern\"\u003eWhen to Use Each Pattern\u003c/h2\u003e\n\u003cp\u003eChoosing between direct Lambda-to-Lambda calls and SNS chaining depends on your workflow\u0026rsquo;s requirements for coupling, reliability, and scalability. While it is technically possible to invoke one Lambda function from another, it is important to understand the implications of doing so synchronously. Synchronous Lambda-to-Lambda calls—where the first function waits for a response from the second—are generally discouraged as a best practice. This is because they can lead to increased latency, higher costs, and more complex error handling, especially if the downstream Lambda experiences throttling or failures. In most cases, tightly coupled, synchronous workflows are better implemented using other AWS services such as Step Functions, which are designed for orchestrating distributed processes with built-in error handling and state management.\u003c/p\u003e","tags":["AWS","TypeScript","Serverless","Architecture","Development"],"title":"Lambda-to-Lambda Calls vs. SNS Chaining in AWS: When and How to Use Each"},{"categories":["Cloud Computing","Architecture and Design"],"content":"Introduction Infrastructure as Code (IaC) has revolutionized how we manage cloud resources, and AWS CloudFormation stands at the forefront of this transformation. While basic templates serve well for simple deployments, advanced patterns can significantly enhance maintainability, reusability, and …","href":"https://scottobert.com/posts/advanced-cloudformation-patterns/","series":null,"summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eInfrastructure as Code (IaC) has revolutionized how we manage cloud resources, and AWS CloudFormation stands at the forefront of this transformation. While basic templates serve well for simple deployments, advanced patterns can significantly enhance maintainability, reusability, and scalability of your infrastructure code. This guide explores sophisticated CloudFormation patterns drawn from real-world experience.\u003c/p\u003e\n\u003ch2 id=\"custom-resources-beyond-standard-aws-resources\"\u003eCustom Resources: Beyond Standard AWS Resources\u003c/h2\u003e\n\u003cp\u003eCloudFormation\u0026rsquo;s custom resources extend its capabilities beyond built-in AWS resource types. Through Lambda-backed custom resources, you can integrate external services, implement complex validation logic, or manage resources that CloudFormation doesn\u0026rsquo;t natively support. Consider this pattern for managing DNS records in external providers or implementing custom validation rules for your infrastructure.\u003c/p\u003e","tags":["AWS","Infrastructure as Code","CloudFormation","Best Practices","DevOps"],"title":"Infrastructure as Code: Advanced CloudFormation Patterns"},{"categories":["Version Control","Development Tools","Developer Experience"],"content":"When working on complex projects, you\u0026amp;rsquo;ll inevitably encounter situations where you need to undo changes from a specific commit that\u0026amp;rsquo;s buried several commits back in your history. Recently, I faced this exact scenario when commit 1d814e5 needed to be reverted from our development branch, …","href":"https://scottobert.com/posts/reverting-git-commits-safely/","series":null,"summary":"\u003cp\u003eWhen working on complex projects, you\u0026rsquo;ll inevitably encounter situations where you need to undo changes from a specific commit that\u0026rsquo;s buried several commits back in your history. Recently, I faced this exact scenario when commit \u003ccode\u003e1d814e5\u003c/code\u003e needed to be reverted from our development branch, but it wasn\u0026rsquo;t the most recent commit. This post explores the safest and most effective ways to handle this situation.\u003c/p\u003e\n\u003ch2 id=\"the-challenge\"\u003eThe Challenge\u003c/h2\u003e\n\u003cp\u003eLooking at a typical git reflog, you might see something like this:\u003c/p\u003e","tags":["Git","Version Control","Development","Developer Tips","Debugging and Troubleshooting"],"title":"Reverting Git Commits Safely: Undoing Changes Without Losing History"},{"categories":["serverless","data-engineering","cloud-computing"],"content":"Building modern applications often requires the ability to perform full-text searches with fuzzy matching capabilities on data that\u0026amp;rsquo;s primarily stored in NoSQL databases like DynamoDB. While DynamoDB excels at fast key-based lookups and can handle massive scale, it lacks the sophisticated …","href":"https://scottobert.com/posts/dynamodb-streams-opensearch-sync/","series":null,"summary":"\u003cp\u003eBuilding modern applications often requires the ability to perform full-text searches with fuzzy matching capabilities on data that\u0026rsquo;s primarily stored in NoSQL databases like DynamoDB. While DynamoDB excels at fast key-based lookups and can handle massive scale, it lacks the sophisticated search capabilities that applications need for features like autocomplete, typo-tolerant search, and complex text analysis. OpenSearch (the open-source fork of Elasticsearch) provides these advanced search capabilities, but keeping it synchronized with your primary data store presents unique challenges.\u003c/p\u003e","tags":["DynamoDB","Lambda","OpenSearch","AWS","real-time","search","TypeScript","streams"],"title":"Real-time Data Synchronization: Using DynamoDB Streams and Lambda to Keep OpenSearch Indexes Current"},{"categories":null,"content":"Welcome to my photo gallery. Here you\u0026amp;rsquo;ll find a collection of my favorite photographs, primarily featuring landscapes and natural wonders from various locations across the United States. From the dramatic arches of Utah to the serene waterfalls of the Pacific Northwest, each image captures a …","href":"https://scottobert.com/album/","series":null,"summary":"\u003cp\u003eWelcome to my photo gallery. Here you\u0026rsquo;ll find a collection of my favorite photographs, primarily featuring landscapes and natural wonders from various locations across the United States. From the dramatic arches of Utah to the serene waterfalls of the Pacific Northwest, each image captures a unique moment in time and place.\u003c/p\u003e\n\u003cdiv class=\"image-gallery\"\u003e\n  \n  \n  \n    \n    \n    \u003cdiv class=\"gallery-item\"\u003e\n      \u003ca href=\"/album/Arches%20Morning-0866.jpg\" class=\"lightbox-image\"\u003e\n        \u003cimg src=\"/album/Arches%20Morning-0866.jpg\" alt=\"Arches Morning-0866\" title=\"Arches Morning-0866\"\u003e\n        \u003cspan class=\"image-caption\"\u003eArches Morning-0866\u003c/span\u003e\n      \u003c/a\u003e\n    \u003c/div\u003e\n  \n    \n    \n    \u003cdiv class=\"gallery-item\"\u003e\n      \u003ca href=\"/album/Arches-0979.jpg\" class=\"lightbox-image\"\u003e\n        \u003cimg src=\"/album/Arches-0979.jpg\" alt=\"Arches-0979\" title=\"Arches-0979\"\u003e\n        \u003cspan class=\"image-caption\"\u003eArches-0979\u003c/span\u003e\n      \u003c/a\u003e\n    \u003c/div\u003e\n  \n    \n    \n    \u003cdiv class=\"gallery-item\"\u003e\n      \u003ca href=\"/album/Arches-1149.jpg\" class=\"lightbox-image\"\u003e\n        \u003cimg src=\"/album/Arches-1149.jpg\" alt=\"Arches-1149\" title=\"Arches-1149\"\u003e\n        \u003cspan class=\"image-caption\"\u003eArches-1149\u003c/span\u003e\n      \u003c/a\u003e\n    \u003c/div\u003e\n  \n    \n    \n    \u003cdiv class=\"gallery-item\"\u003e\n      \u003ca href=\"/album/IMG_1821-1823.jpg\" class=\"lightbox-image\"\u003e\n        \u003cimg src=\"/album/IMG_1821-1823.jpg\" alt=\"IMG_1821-1823\" title=\"IMG_1821-1823\"\u003e\n        \u003cspan class=\"image-caption\"\u003eIMG_1821-1823\u003c/span\u003e\n      \u003c/a\u003e\n    \u003c/div\u003e\n  \n    \n    \n    \u003cdiv class=\"gallery-item\"\u003e\n      \u003ca href=\"/album/IMG_2328.jpg\" class=\"lightbox-image\"\u003e\n        \u003cimg src=\"/album/IMG_2328.jpg\" alt=\"IMG_2328\" title=\"IMG_2328\"\u003e\n        \u003cspan class=\"image-caption\"\u003eIMG_2328\u003c/span\u003e\n      \u003c/a\u003e\n    \u003c/div\u003e\n  \n    \n    \n    \u003cdiv class=\"gallery-item\"\u003e\n      \u003ca href=\"/album/IMG_2329.jpg\" class=\"lightbox-image\"\u003e\n        \u003cimg src=\"/album/IMG_2329.jpg\" alt=\"IMG_2329\" title=\"IMG_2329\"\u003e\n        \u003cspan class=\"image-caption\"\u003eIMG_2329\u003c/span\u003e\n      \u003c/a\u003e\n    \u003c/div\u003e\n  \n    \n    \n    \u003cdiv class=\"gallery-item\"\u003e\n      \u003ca href=\"/album/IMG_2412.jpg\" class=\"lightbox-image\"\u003e\n        \u003cimg src=\"/album/IMG_2412.jpg\" alt=\"IMG_2412\" title=\"IMG_2412\"\u003e\n        \u003cspan class=\"image-caption\"\u003eIMG_2412\u003c/span\u003e\n      \u003c/a\u003e\n    \u003c/div\u003e\n  \n    \n    \n    \u003cdiv class=\"gallery-item\"\u003e\n      \u003ca href=\"/album/IMG_2414_DxO_raw.jpg\" class=\"lightbox-image\"\u003e\n        \u003cimg src=\"/album/IMG_2414_DxO_raw.jpg\" alt=\"IMG_2414_DxO_raw\" title=\"IMG_2414_DxO_raw\"\u003e\n        \u003cspan class=\"image-caption\"\u003eIMG_2414_DxO_raw\u003c/span\u003e\n      \u003c/a\u003e\n    \u003c/div\u003e\n  \n    \n    \n    \u003cdiv class=\"gallery-item\"\u003e\n      \u003ca href=\"/album/IMG_2854a.jpg\" class=\"lightbox-image\"\u003e\n        \u003cimg src=\"/album/IMG_2854a.jpg\" alt=\"IMG_2854a\" title=\"IMG_2854a\"\u003e\n        \u003cspan class=\"image-caption\"\u003eIMG_2854a\u003c/span\u003e\n      \u003c/a\u003e\n    \u003c/div\u003e\n  \n    \n    \n    \u003cdiv class=\"gallery-item\"\u003e\n      \u003ca href=\"/album/IMG_3002.jpg\" class=\"lightbox-image\"\u003e\n        \u003cimg src=\"/album/IMG_3002.jpg\" alt=\"IMG_3002\" title=\"IMG_3002\"\u003e\n        \u003cspan class=\"image-caption\"\u003eIMG_3002\u003c/span\u003e\n      \u003c/a\u003e\n    \u003c/div\u003e\n  \n    \n    \n    \u003cdiv class=\"gallery-item\"\u003e\n      \u003ca href=\"/album/IMG_3022_tonemapped.jpg\" class=\"lightbox-image\"\u003e\n        \u003cimg src=\"/album/IMG_3022_tonemapped.jpg\" alt=\"IMG_3022_tonemapped\" title=\"IMG_3022_tonemapped\"\u003e\n        \u003cspan class=\"image-caption\"\u003eIMG_3022_tonemapped\u003c/span\u003e\n      \u003c/a\u003e\n    \u003c/div\u003e\n  \n    \n    \n    \u003cdiv class=\"gallery-item\"\u003e\n      \u003ca href=\"/album/IMG_3046.jpg\" class=\"lightbox-image\"\u003e\n        \u003cimg src=\"/album/IMG_3046.jpg\" alt=\"IMG_3046\" title=\"IMG_3046\"\u003e\n        \u003cspan class=\"image-caption\"\u003eIMG_3046\u003c/span\u003e\n      \u003c/a\u003e\n    \u003c/div\u003e\n  \n    \n    \n    \u003cdiv class=\"gallery-item\"\u003e\n      \u003ca href=\"/album/IMG_3079_tonemapped.jpg\" class=\"lightbox-image\"\u003e\n        \u003cimg src=\"/album/IMG_3079_tonemapped.jpg\" alt=\"IMG_3079_tonemapped\" title=\"IMG_3079_tonemapped\"\u003e\n        \u003cspan class=\"image-caption\"\u003eIMG_3079_tonemapped\u003c/span\u003e\n      \u003c/a\u003e\n    \u003c/div\u003e\n  \n    \n    \n    \u003cdiv class=\"gallery-item\"\u003e\n      \u003ca href=\"/album/IMG_3101wp2.jpg\" class=\"lightbox-image\"\u003e\n        \u003cimg src=\"/album/IMG_3101wp2.jpg\" alt=\"IMG_3101wp2\" title=\"IMG_3101wp2\"\u003e\n        \u003cspan class=\"image-caption\"\u003eIMG_3101wp2\u003c/span\u003e\n      \u003c/a\u003e\n    \u003c/div\u003e\n  \n    \n    \n    \u003cdiv class=\"gallery-item\"\u003e\n      \u003ca href=\"/album/IMG_3523.jpg\" class=\"lightbox-image\"\u003e\n        \u003cimg src=\"/album/IMG_3523.jpg\" alt=\"IMG_3523\" title=\"IMG_3523\"\u003e\n        \u003cspan class=\"image-caption\"\u003eIMG_3523\u003c/span\u003e\n      \u003c/a\u003e\n    \u003c/div\u003e\n  \n    \n    \n    \u003cdiv class=\"gallery-item\"\u003e\n      \u003ca href=\"/album/IMG_3562_3_4_5_tonemapped.jpg\" class=\"lightbox-image\"\u003e\n        \u003cimg src=\"/album/IMG_3562_3_4_5_tonemapped.jpg\" alt=\"IMG_3562_3_4_5_tonemapped\" title=\"IMG_3562_3_4_5_tonemapped\"\u003e\n        \u003cspan class=\"image-caption\"\u003eIMG_3562_3_4_5_tonemapped\u003c/span\u003e\n      \u003c/a\u003e\n    \u003c/div\u003e\n  \n    \n    \n    \u003cdiv class=\"gallery-item\"\u003e\n      \u003ca href=\"/album/IMG_7202.jpg\" class=\"lightbox-image\"\u003e\n        \u003cimg src=\"/album/IMG_7202.jpg\" alt=\"IMG_7202\" title=\"IMG_7202\"\u003e\n        \u003cspan class=\"image-caption\"\u003eIMG_7202\u003c/span\u003e\n      \u003c/a\u003e\n    \u003c/div\u003e\n  \n    \n    \n    \u003cdiv class=\"gallery-item\"\u003e\n      \u003ca href=\"/album/IMG_7237.jpg\" class=\"lightbox-image\"\u003e\n        \u003cimg src=\"/album/IMG_7237.jpg\" alt=\"IMG_7237\" title=\"IMG_7237\"\u003e\n        \u003cspan class=\"image-caption\"\u003eIMG_7237\u003c/span\u003e\n      \u003c/a\u003e\n    \u003c/div\u003e\n  \n    \n    \n    \u003cdiv class=\"gallery-item\"\u003e\n      \u003ca href=\"/album/Missouri%20River-5631-Edit.jpg\" class=\"lightbox-image\"\u003e\n        \u003cimg src=\"/album/Missouri%20River-5631-Edit.jpg\" alt=\"Missouri River-5631-Edit\" title=\"Missouri River-5631-Edit\"\u003e\n        \u003cspan class=\"image-caption\"\u003eMissouri River-5631-Edit\u003c/span\u003e\n      \u003c/a\u003e\n    \u003c/div\u003e\n  \n    \n    \n    \u003cdiv class=\"gallery-item\"\u003e\n      \u003ca href=\"/album/Northern%20Lights-1370.jpg\" class=\"lightbox-image\"\u003e\n        \u003cimg src=\"/album/Northern%20Lights-1370.jpg\" alt=\"Northern Lights-1370\" title=\"Northern Lights-1370\"\u003e\n        \u003cspan class=\"image-caption\"\u003eNorthern Lights-1370\u003c/span\u003e\n      \u003c/a\u003e\n    \u003c/div\u003e\n  \n    \n    \n    \u003cdiv class=\"gallery-item\"\u003e\n      \u003ca href=\"/album/Salish%20Lodge%20-%20Snoqualmie%20Falls.jpg\" class=\"lightbox-image\"\u003e\n        \u003cimg src=\"/album/Salish%20Lodge%20-%20Snoqualmie%20Falls.jpg\" alt=\"Salish Lodge - Snoqualmie Falls\" title=\"Salish Lodge - Snoqualmie Falls\"\u003e\n        \u003cspan class=\"image-caption\"\u003eSalish Lodge - Snoqualmie Falls\u003c/span\u003e\n      \u003c/a\u003e\n    \u003c/div\u003e\n  \n    \n    \n    \u003cdiv class=\"gallery-item\"\u003e\n      \u003ca href=\"/album/Shoshone%20Falls-1179-HDR.jpg\" class=\"lightbox-image\"\u003e\n        \u003cimg src=\"/album/Shoshone%20Falls-1179-HDR.jpg\" alt=\"Shoshone Falls-1179-HDR\" title=\"Shoshone Falls-1179-HDR\"\u003e\n        \u003cspan class=\"image-caption\"\u003eShoshone Falls-1179-HDR\u003c/span\u003e\n      \u003c/a\u003e\n    \u003c/div\u003e\n  \n    \n    \n    \u003cdiv class=\"gallery-item\"\u003e\n      \u003ca href=\"/album/Sunset-0864.jpg\" class=\"lightbox-image\"\u003e\n        \u003cimg src=\"/album/Sunset-0864.jpg\" alt=\"Sunset-0864\" title=\"Sunset-0864\"\u003e\n        \u003cspan class=\"image-caption\"\u003eSunset-0864\u003c/span\u003e\n      \u003c/a\u003e\n    \u003c/div\u003e\n  \n\u003c/div\u003e","tags":null,"title":"Photo Gallery"},{"categories":["Software Development","Artificial Intelligence"],"content":"Introduction Artificial Intelligence (AI) is rapidly reshaping the landscape of software engineering. From automating repetitive tasks to enhancing code quality and enabling smarter decision-making, AI-powered tools are becoming essential in the modern developer\u0026amp;rsquo;s toolkit.\nKey Applications of …","href":"https://scottobert.com/posts/using-ai-in-software-engineering/","series":null,"summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eArtificial Intelligence (AI) is rapidly reshaping the landscape of software engineering. From automating repetitive tasks to enhancing code quality and enabling smarter decision-making, AI-powered tools are becoming essential in the modern developer\u0026rsquo;s toolkit.\u003c/p\u003e\n\u003ch2 id=\"key-applications-of-ai-in-software-engineering\"\u003eKey Applications of AI in Software Engineering\u003c/h2\u003e\n\u003ch3 id=\"1-code-generation-and-completion\"\u003e1. Code Generation and Completion\u003c/h3\u003e\n\u003cp\u003eAI-powered code assistants, such as GitHub Copilot, can suggest code snippets, complete functions, and even generate entire modules based on natural language prompts. This accelerates development and reduces boilerplate coding.\u003c/p\u003e","tags":["AI","Software Engineering","Productivity","Automation"],"title":"Harnessing AI in Software Engineering: Opportunities and Challenges"},{"categories":["Cloud Computing","Real-time Applications"],"content":"Modern applications increasingly demand real-time capabilities—from live chat systems and collaborative editing to real-time dashboards and gaming. In this final post of our AWS and TypeScript series, we\u0026amp;rsquo;ll explore how to build scalable real-time applications using AWS API Gateway WebSocket …","href":"https://scottobert.com/posts/aws-websockets-typescript/","series":"AWS and Typescript","summary":"\u003cp\u003eModern applications increasingly demand real-time capabilities—from live chat systems and collaborative editing to real-time dashboards and gaming. In this final post of our AWS and TypeScript series, we\u0026rsquo;ll explore how to build scalable real-time applications using AWS API Gateway WebSocket APIs, Lambda functions, and TypeScript to create robust, type-safe real-time communication systems.\u003c/p\u003e\n\u003cdiv class=\"plantuml-container\"\u003e\n  \u003cimg id=\"plantuml-websocket-architecture\" class=\"plantuml-diagram\"/\u003e\n  \u003ca id=\"plantuml-link-websocket-architecture\" href=\"#\" target=\"_blank\" class=\"plantuml-link\" title=\"Open diagram in new window\"\u003e\n    \u003cspan class=\"plantuml-link-icon\"\u003e🔍\u003c/span\u003e\n  \u003c/a\u003e\n\u003c/div\u003e\n\u003cscript src=\"/js/rawdeflate.js\"\u003e\u003c/script\u003e\n\u003cscript\u003e\n  \n\n  function encode64(data) {\n    r = \"\";\n    for (i=0; i\u003cdata.length; i+=3) {\n      if (i+2==data.length) {\n        r +=append3bytes(data.charCodeAt(i), data.charCodeAt(i+1), 0);\n      } else if (i+1==data.length) {\n        r += append3bytes(data.charCodeAt(i), 0, 0);\n      } else {\n        r += append3bytes(data.charCodeAt(i), data.charCodeAt(i+1),\n            data.charCodeAt(i+2));\n      }\n    }\n    return r;\n  }\n\n  function append3bytes(b1, b2, b3) {\n    c1 = b1 \u003e\u003e 2;\n    c2 = ((b1 \u0026 0x3) \u003c\u003c 4) | (b2 \u003e\u003e 4);\n    c3 = ((b2 \u0026 0xF) \u003c\u003c 2) | (b3 \u003e\u003e 6);\n    c4 = b3 \u0026 0x3F;\n    r = \"\";\n    r += encode6bit(c1 \u0026 0x3F);\n    r += encode6bit(c2 \u0026 0x3F);\n    r += encode6bit(c3 \u0026 0x3F);\n    r += encode6bit(c4 \u0026 0x3F);\n    return r;\n  }\n\n  function encode6bit(b) {\n    if (b \u003c 10) {\n      return String.fromCharCode(48 + b);\n    }\n    b -= 10;\n    if (b \u003c 26) {\n      return String.fromCharCode(65 + b);\n    }\n    b -= 26;\n    if (b \u003c 26) {\n      return String.fromCharCode(97 + b);\n    }\n    b -= 26;\n    if (b == 0) {\n      return '-';\n    }\n    if (b == 1) {\n      return '_';\n    }\n    return '?';\n  }\n\n  var deflater = window.SharedWorker \u0026\u0026 new SharedWorker('/js/rawdeflate.js');\n  if (deflater) {\n    deflater.port.addEventListener('message', done_deflating, false);\n    deflater.port.start();\n  } else if (window.Worker) {\n    deflater = new Worker('/js/rawdeflate.js');\n    deflater.onmessage = done_deflating;\n  }\n\n  function done_deflating(e) {\n    const img = document.getElementById(\"plantuml-websocket-architecture\");\n    const imgUrl = \"https://www.plantuml.com/plantuml/img/\"+encode64(e.data);\n    img.src = imgUrl;\n    \n    \n    const link = document.getElementById(\"plantuml-link-websocket-architecture\");\n    if (link) {\n      link.href = imgUrl;\n    }\n  }\n\n  function compress(s) {\n    \n    s = unescape(encodeURIComponent(s));\n  \n    if (deflater) {\n      if (deflater.port \u0026\u0026 deflater.port.postMessage) {\n        deflater.port.postMessage(s);\n      } else {\n        deflater.postMessage(s);\n      }\n    } else {\n      setTimeout(function() {\n          done_deflating({ data: deflate(s) });\n          }, 100);\n    }\n  }\n\n  compress(\"\\n@startuml WebSocket Architecture\\n!define RECTANGLE class\\n\\ncloud \\u0022Client Applications\\u0022 as clients\\npackage \\u0022AWS Cloud\\u0022 {\\n  rectangle \\u0022API Gateway WebSocket\\u0022 as apigw {\\n    rectangle \\u0022Connect Route\\u0022 as connect\\n    rectangle \\u0022Disconnect Route\\u0022 as disconnect\\n    rectangle \\u0022Message Routes\\u0022 as routes\\n  }\\n  \\n  package \\u0022Lambda Functions\\u0022 {\\n    rectangle \\u0022Connection Handler\\u0022 as conn_handler\\n    rectangle \\u0022Message Handler\\u0022 as msg_handler\\n    rectangle \\u0022Room Manager\\u0022 as room_handler\\n    rectangle \\u0022Broadcast Service\\u0022 as broadcast\\n  }\\n  \\n  database \\u0022DynamoDB\\u0022 as dynamo {\\n    rectangle \\u0022Connections Table\\u0022 as conn_table\\n    rectangle \\u0022Messages Table\\u0022 as msg_table\\n    rectangle \\u0022Rooms Table\\u0022 as room_table\\n  }\\n  \\n  rectangle \\u0022API Gateway Management API\\u0022 as mgmt_api\\n}\\n\\nclients \\u003c--\\u003e connect : WebSocket Connection\\nclients \\u003c--\\u003e disconnect : WebSocket Disconnection\\nclients \\u003c--\\u003e routes : Real-time Messages\\n\\nconnect --\\u003e conn_handler : $connect\\ndisconnect --\\u003e conn_handler : $disconnect\\nroutes --\\u003e msg_handler : Custom Routes\\nroutes --\\u003e room_handler : Room Operations\\n\\nconn_handler --\\u003e conn_table : Store Connection\\nmsg_handler --\\u003e msg_table : Store Message\\nroom_handler --\\u003e room_table : Manage Rooms\\n\\nbroadcast --\\u003e mgmt_api : Send to Connections\\nmgmt_api --\\u003e clients : Real-time Updates\\n\\nnote right of apigw\\n  • Persistent connections\\n  • Bidirectional communication  • Auto-scaling\\n  • Route-based message handling\\nend note\\n\\nnote right of dynamo\\n  • Connection state storage\\n  • Message persistence\\n  • Room membership\\n  • TTL for cleanup\\nend note\\n@enduml\\n\")\n\u003c/script\u003e\n\u003ch2 id=\"understanding-websocket-apis-with-aws\"\u003eUnderstanding WebSocket APIs with AWS\u003c/h2\u003e\n\u003cp\u003eAWS API Gateway WebSocket APIs provide a fully managed service for building real-time, bidirectional communication applications. Key advantages include:\u003c/p\u003e","tags":["AWS","TypeScript","WebSockets","Real-time","API Gateway","Serverless"],"title":"Real-time Applications with AWS WebSockets and TypeScript"},{"categories":["Cloud Computing","Infrastructure as Code"],"content":"Managing cloud infrastructure through code brings numerous advantages over manual configuration, including version control, reproducibility, and automated deployment pipelines. In this post, we\u0026amp;rsquo;ll explore how to use AWS CDK (Cloud Development Kit) with TypeScript to create, manage, and deploy …","href":"https://scottobert.com/posts/aws-cdk-typescript/","series":"AWS and Typescript","summary":"\u003cp\u003eManaging cloud infrastructure through code brings numerous advantages over manual configuration, including version control, reproducibility, and automated deployment pipelines. In this post, we\u0026rsquo;ll explore how to use AWS CDK (Cloud Development Kit) with TypeScript to create, manage, and deploy serverless applications with infrastructure that\u0026rsquo;s as maintainable and type-safe as your application code.\u003c/p\u003e\n\u003ch2 id=\"why-cdk-with-typescript\"\u003eWhy CDK with TypeScript?\u003c/h2\u003e\n\u003cp\u003eAWS CDK offers a compelling alternative to traditional infrastructure tools by allowing you to define cloud resources using familiar programming languages. When combined with TypeScript, CDK provides compile-time type checking, intelligent code completion, and the ability to create reusable, composable infrastructure components.\u003c/p\u003e","tags":["AWS","TypeScript","CDK","Infrastructure","DevOps","Serverless"],"title":"AWS CDK Infrastructure as Code with TypeScript"},{"categories":["Cloud Computing","Database Design"],"content":"Working with NoSQL databases like DynamoDB can be challenging when it comes to maintaining type safety and data consistency. In this post, we\u0026amp;rsquo;ll explore how to build robust, type-safe DynamoDB operations using TypeScript, covering everything from basic CRUD operations to advanced patterns like …","href":"https://scottobert.com/posts/dynamodb-typescript/","series":"AWS and Typescript","summary":"\u003cp\u003eWorking with NoSQL databases like DynamoDB can be challenging when it comes to maintaining type safety and data consistency. In this post, we\u0026rsquo;ll explore how to build robust, type-safe DynamoDB operations using TypeScript, covering everything from basic CRUD operations to advanced patterns like single-table design and transaction handling.\u003c/p\u003e\n\u003cdiv class=\"plantuml-container\"\u003e\n  \u003cimg id=\"plantuml-dynamodb-single-table\" class=\"plantuml-diagram\"/\u003e\n  \u003ca id=\"plantuml-link-dynamodb-single-table\" href=\"#\" target=\"_blank\" class=\"plantuml-link\" title=\"Open diagram in new window\"\u003e\n    \u003cspan class=\"plantuml-link-icon\"\u003e🔍\u003c/span\u003e\n  \u003c/a\u003e\n\u003c/div\u003e\n\u003cscript src=\"/js/rawdeflate.js\"\u003e\u003c/script\u003e\n\u003cscript\u003e\n  \n\n  function encode64(data) {\n    r = \"\";\n    for (i=0; i\u003cdata.length; i+=3) {\n      if (i+2==data.length) {\n        r +=append3bytes(data.charCodeAt(i), data.charCodeAt(i+1), 0);\n      } else if (i+1==data.length) {\n        r += append3bytes(data.charCodeAt(i), 0, 0);\n      } else {\n        r += append3bytes(data.charCodeAt(i), data.charCodeAt(i+1),\n            data.charCodeAt(i+2));\n      }\n    }\n    return r;\n  }\n\n  function append3bytes(b1, b2, b3) {\n    c1 = b1 \u003e\u003e 2;\n    c2 = ((b1 \u0026 0x3) \u003c\u003c 4) | (b2 \u003e\u003e 4);\n    c3 = ((b2 \u0026 0xF) \u003c\u003c 2) | (b3 \u003e\u003e 6);\n    c4 = b3 \u0026 0x3F;\n    r = \"\";\n    r += encode6bit(c1 \u0026 0x3F);\n    r += encode6bit(c2 \u0026 0x3F);\n    r += encode6bit(c3 \u0026 0x3F);\n    r += encode6bit(c4 \u0026 0x3F);\n    return r;\n  }\n\n  function encode6bit(b) {\n    if (b \u003c 10) {\n      return String.fromCharCode(48 + b);\n    }\n    b -= 10;\n    if (b \u003c 26) {\n      return String.fromCharCode(65 + b);\n    }\n    b -= 26;\n    if (b \u003c 26) {\n      return String.fromCharCode(97 + b);\n    }\n    b -= 26;\n    if (b == 0) {\n      return '-';\n    }\n    if (b == 1) {\n      return '_';\n    }\n    return '?';\n  }\n\n  var deflater = window.SharedWorker \u0026\u0026 new SharedWorker('/js/rawdeflate.js');\n  if (deflater) {\n    deflater.port.addEventListener('message', done_deflating, false);\n    deflater.port.start();\n  } else if (window.Worker) {\n    deflater = new Worker('/js/rawdeflate.js');\n    deflater.onmessage = done_deflating;\n  }\n\n  function done_deflating(e) {\n    const img = document.getElementById(\"plantuml-dynamodb-single-table\");\n    const imgUrl = \"https://www.plantuml.com/plantuml/img/\"+encode64(e.data);\n    img.src = imgUrl;\n    \n    \n    const link = document.getElementById(\"plantuml-link-dynamodb-single-table\");\n    if (link) {\n      link.href = imgUrl;\n    }\n  }\n\n  function compress(s) {\n    \n    s = unescape(encodeURIComponent(s));\n  \n    if (deflater) {\n      if (deflater.port \u0026\u0026 deflater.port.postMessage) {\n        deflater.port.postMessage(s);\n      } else {\n        deflater.postMessage(s);\n      }\n    } else {\n      setTimeout(function() {\n          done_deflating({ data: deflate(s) });\n          }, 100);\n    }\n  }\n\n  compress(\"\\n@startuml DynamoDB Single Table Design\\n!define RECTANGLE class\\n\\npackage \\u0022Single Table Design\\u0022 {\\n  database \\u0022DynamoDB Table\\u0022 as table {\\n    rectangle \\u0022Partition Key (PK)\\u0022 as pk\\n    rectangle \\u0022Sort Key (SK)\\u0022 as sk\\n    rectangle \\u0022GSI1PK\\u0022 as gsi1pk\\n    rectangle \\u0022GSI1SK\\u0022 as gsi1sk\\n  }\\n  \\n  rectangle \\u0022User Entity\\u0022 as user {\\n    rectangle \\u0022PK: USER#123\\u0022 as user_pk\\n    rectangle \\u0022SK: USER#123\\u0022 as user_sk\\n    rectangle \\u0022GSI1PK: EMAIL#user_at_domain.com\\u0022 as user_gsi1pk\\n    rectangle \\u0022Data: name, email, dept\\u0022 as user_data\\n  }\\n  \\n  rectangle \\u0022Order Entity\\u0022 as order {\\n    rectangle \\u0022PK: ORDER#456\\u0022 as order_pk\\n    rectangle \\u0022SK: ORDER#456\\u0022 as order_sk\\n    rectangle \\u0022GSI1PK: USER#123\\u0022 as order_gsi1pk\\n    rectangle \\u0022GSI1SK: ORDER#2023-07-02\\u0022 as order_gsi1sk\\n    rectangle \\u0022Data: items, total, status\\u0022 as order_data\\n  }\\n  \\n  rectangle \\u0022Product Entity\\u0022 as product {\\n    rectangle \\u0022PK: PRODUCT#789\\u0022 as product_pk\\n    rectangle \\u0022SK: PRODUCT#789\\u0022 as product_sk\\n    rectangle \\u0022GSI1PK: CATEGORY#electronics\\u0022 as product_gsi1pk\\n    rectangle \\u0022Data: name, price, stock\\u0022 as product_data\\n  }\\n}\\n\\ntable --\\u003e user : Store\\ntable --\\u003e order : Store\\ntable --\\u003e product : Store\\n\\nnote right of table\\n  • Single table for all entities\\n  • Composite keys for relationships\\n  • GSI for access patterns\\n  • Type-safe operations\\nend note\\n\\nnote bottom of user\\n  Access Patterns:\\n  • Get user by ID: PK = USER#id\\n  • Get user by email: GSI1PK = EMAIL#email\\nend note\\n\\nnote bottom of order\\n  Access Patterns:\\n  • Get order by ID: PK = ORDER#id\\n  • Get orders by user: GSI1PK = USER#id\\nend note\\n@enduml\\n\")\n\u003c/script\u003e\n\u003ch2 id=\"why-type-safety-matters-with-dynamodb\"\u003eWhy Type Safety Matters with DynamoDB\u003c/h2\u003e\n\u003cp\u003eDynamoDB\u0026rsquo;s flexible schema brings both opportunities and challenges:\u003c/p\u003e","tags":["AWS","TypeScript","DynamoDB","NoSQL","Database","Development"],"title":"DynamoDB with TypeScript: Type-Safe NoSQL Operations"},{"categories":["Cloud Computing","Cost Optimization"],"content":"Introduction While serverless architectures can significantly reduce operational costs, they require thoughtful design and configuration to maximize cost efficiency. This guide explores practical strategies for optimizing costs in AWS serverless applications, based on real-world experience and …","href":"https://scottobert.com/posts/aws-serverless-cost-optimization/","series":null,"summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eWhile serverless architectures can significantly reduce operational costs, they require thoughtful design and configuration to maximize cost efficiency. This guide explores practical strategies for optimizing costs in AWS serverless applications, based on real-world experience and proven patterns.\u003c/p\u003e\n\u003ch2 id=\"lambda-function-optimization\"\u003eLambda Function Optimization\u003c/h2\u003e\n\u003ch3 id=\"memory-and-duration-trade-offs\"\u003eMemory and Duration Trade-offs\u003c/h3\u003e\n\u003cp\u003eThe relationship between Lambda memory allocation and execution duration isn\u0026rsquo;t always intuitive. Higher memory allocations often lead to faster execution times, potentially reducing overall costs. When right-sizing memory for your functions, start with the minimum required memory of 128MB and gradually increase while monitoring performance. In many cases, doubling the memory from 128MB to 256MB can cut execution time in half, resulting in lower overall costs despite the higher memory price.\u003c/p\u003e","tags":["AWS","Serverless","Cost Optimization","Best Practices","Lambda"],"title":"Cost Optimization Strategies for AWS Serverless Applications"},{"categories":["Cloud Computing","API Development"],"content":"Building robust APIs requires more than just handling HTTP requests—it demands type safety, proper validation, and clear documentation. In this post, we\u0026amp;rsquo;ll explore how to build production-ready APIs using AWS API Gateway with TypeScript, ensuring type safety from request to response while …","href":"https://scottobert.com/posts/aws-api-gateway-typescript/","series":"AWS and Typescript","summary":"\u003cp\u003eBuilding robust APIs requires more than just handling HTTP requests—it demands type safety, proper validation, and clear documentation. In this post, we\u0026rsquo;ll explore how to build production-ready APIs using AWS API Gateway with TypeScript, ensuring type safety from request to response while maintaining excellent developer experience.\u003c/p\u003e\n\u003cdiv class=\"plantuml-container\"\u003e\n  \u003cimg id=\"plantuml-api-gateway-architecture\" class=\"plantuml-diagram\"/\u003e\n  \u003ca id=\"plantuml-link-api-gateway-architecture\" href=\"#\" target=\"_blank\" class=\"plantuml-link\" title=\"Open diagram in new window\"\u003e\n    \u003cspan class=\"plantuml-link-icon\"\u003e🔍\u003c/span\u003e\n  \u003c/a\u003e\n\u003c/div\u003e\n\u003cscript src=\"/js/rawdeflate.js\"\u003e\u003c/script\u003e\n\u003cscript\u003e\n  \n\n  function encode64(data) {\n    r = \"\";\n    for (i=0; i\u003cdata.length; i+=3) {\n      if (i+2==data.length) {\n        r +=append3bytes(data.charCodeAt(i), data.charCodeAt(i+1), 0);\n      } else if (i+1==data.length) {\n        r += append3bytes(data.charCodeAt(i), 0, 0);\n      } else {\n        r += append3bytes(data.charCodeAt(i), data.charCodeAt(i+1),\n            data.charCodeAt(i+2));\n      }\n    }\n    return r;\n  }\n\n  function append3bytes(b1, b2, b3) {\n    c1 = b1 \u003e\u003e 2;\n    c2 = ((b1 \u0026 0x3) \u003c\u003c 4) | (b2 \u003e\u003e 4);\n    c3 = ((b2 \u0026 0xF) \u003c\u003c 2) | (b3 \u003e\u003e 6);\n    c4 = b3 \u0026 0x3F;\n    r = \"\";\n    r += encode6bit(c1 \u0026 0x3F);\n    r += encode6bit(c2 \u0026 0x3F);\n    r += encode6bit(c3 \u0026 0x3F);\n    r += encode6bit(c4 \u0026 0x3F);\n    return r;\n  }\n\n  function encode6bit(b) {\n    if (b \u003c 10) {\n      return String.fromCharCode(48 + b);\n    }\n    b -= 10;\n    if (b \u003c 26) {\n      return String.fromCharCode(65 + b);\n    }\n    b -= 26;\n    if (b \u003c 26) {\n      return String.fromCharCode(97 + b);\n    }\n    b -= 26;\n    if (b == 0) {\n      return '-';\n    }\n    if (b == 1) {\n      return '_';\n    }\n    return '?';\n  }\n\n  var deflater = window.SharedWorker \u0026\u0026 new SharedWorker('/js/rawdeflate.js');\n  if (deflater) {\n    deflater.port.addEventListener('message', done_deflating, false);\n    deflater.port.start();\n  } else if (window.Worker) {\n    deflater = new Worker('/js/rawdeflate.js');\n    deflater.onmessage = done_deflating;\n  }\n\n  function done_deflating(e) {\n    const img = document.getElementById(\"plantuml-api-gateway-architecture\");\n    const imgUrl = \"https://www.plantuml.com/plantuml/img/\"+encode64(e.data);\n    img.src = imgUrl;\n    \n    \n    const link = document.getElementById(\"plantuml-link-api-gateway-architecture\");\n    if (link) {\n      link.href = imgUrl;\n    }\n  }\n\n  function compress(s) {\n    \n    s = unescape(encodeURIComponent(s));\n  \n    if (deflater) {\n      if (deflater.port \u0026\u0026 deflater.port.postMessage) {\n        deflater.port.postMessage(s);\n      } else {\n        deflater.postMessage(s);\n      }\n    } else {\n      setTimeout(function() {\n          done_deflating({ data: deflate(s) });\n          }, 100);\n    }\n  }\n\n  compress(\"\\n@startuml API Gateway Architecture\\n!define RECTANGLE class\\n\\ncloud \\u0022Client Applications\\u0022 as clients\\npackage \\u0022AWS Cloud\\u0022 {\\n  rectangle \\u0022API Gateway\\u0022 as apigw {\\n    rectangle \\u0022REST API\\u0022 as restapi\\n    rectangle \\u0022Request Validation\\u0022 as validation\\n    rectangle \\u0022CORS\\u0022 as cors\\n  }\\n  \\n  package \\u0022Lambda Functions\\u0022 {\\n    rectangle \\u0022Create User\\u0022 as create\\n    rectangle \\u0022Get User\\u0022 as get\\n    rectangle \\u0022Update User\\u0022 as update\\n    rectangle \\u0022Delete User\\u0022 as delete\\n  }\\n  \\n  database \\u0022DynamoDB\\u0022 as dynamo {\\n    rectangle \\u0022Users Table\\u0022 as table\\n  }\\n}\\n\\nclients --\\u003e restapi : HTTPS Requests\\nrestapi --\\u003e validation : Validate Schema\\nvalidation --\\u003e cors : Apply CORS\\ncors --\\u003e create : POST \\/users\\ncors --\\u003e get : GET \\/users\\/{id}\\ncors --\\u003e update : PUT \\/users\\/{id}\\ncors --\\u003e delete : DELETE \\/users\\/{id}\\n\\ncreate --\\u003e table : Store User\\nget --\\u003e table : Retrieve User\\nupdate --\\u003e table : Update User\\ndelete --\\u003e table : Remove User\\n\\nnote right of validation\\n  • Request validation\\n  • Type checking\\n  • Schema enforcement\\nend note\\n\\nnote right of table\\n  • Primary Key: id\\n  • Attributes: name, email,\\n    department, timestamps\\nend note\\n@enduml\\n\")\n\u003c/script\u003e\n\u003ch2 id=\"why-type-safe-apis-matter\"\u003eWhy Type-Safe APIs Matter\u003c/h2\u003e\n\u003cp\u003eType safety in API development provides several critical advantages:\u003c/p\u003e","tags":["AWS","TypeScript","API Gateway","Serverless","Development","REST API"],"title":"Building Type-Safe APIs with AWS API Gateway and TypeScript"},{"categories":["Cloud Computing","Architecture and Design"],"content":"Event-driven architectures form the backbone of modern cloud applications, enabling systems to scale gracefully while maintaining loose coupling between components. This post explores how AWS SNS and SQS, combined with TypeScript\u0026amp;rsquo;s type safety, create robust messaging patterns that handle …","href":"https://scottobert.com/posts/aws-sns-sqs-typescript/","series":"AWS and Typescript","summary":"\u003cp\u003eEvent-driven architectures form the backbone of modern cloud applications, enabling systems to scale gracefully while maintaining loose coupling between components. This post explores how AWS SNS and SQS, combined with TypeScript\u0026rsquo;s type safety, create robust messaging patterns that handle everything from simple notifications to complex distributed workflows.\u003c/p\u003e\n\u003ch2 id=\"event-driven-architecture-benefits\"\u003eEvent-Driven Architecture Benefits\u003c/h2\u003e\n\u003cp\u003eEvent-driven systems offer compelling advantages for modern applications. \u003cstrong\u003eLoose coupling\u003c/strong\u003e allows services to evolve independently without breaking dependencies. \u003cstrong\u003eNatural scalability\u003c/strong\u003e emerges as components can scale based on their specific load patterns rather than system-wide peaks. \u003cstrong\u003eResilience\u003c/strong\u003e improves through built-in buffering and retry mechanisms that handle traffic spikes and temporary failures gracefully.\u003c/p\u003e","tags":["AWS","TypeScript","Serverless","Development","Architecture"],"title":"Building Event-Driven Architectures with AWS SNS/SQS and TypeScript"},{"categories":["Cloud Computing","Security"],"content":"Following our exploration of AWS Lambda with TypeScript and Step Functions, it\u0026amp;rsquo;s crucial to understand how to properly secure your serverless applications. Security in serverless architectures requires a different approach from traditional applications, as the infrastructure is managed by AWS …","href":"https://scottobert.com/posts/securing-aws-lambda/","series":null,"summary":"\u003cp\u003eFollowing our exploration of AWS Lambda with TypeScript and Step Functions, it\u0026rsquo;s crucial to understand how to properly secure your serverless applications. Security in serverless architectures requires a different approach from traditional applications, as the infrastructure is managed by AWS while you maintain responsibility for securing your application logic and data.\u003c/p\u003e\n\u003ch2 id=\"understanding-the-shared-responsibility-model\"\u003eUnderstanding the Shared Responsibility Model\u003c/h2\u003e\n\u003cp\u003eIn the AWS Lambda context, the shared responsibility model takes on a unique form. AWS handles the security of the runtime environment, execution environment isolation, and underlying infrastructure. However, developers are responsible for securing their application code, managing IAM permissions, protecting sensitive data, and ensuring secure communication between services. This division of responsibility allows you to focus on application-specific security while AWS handles the infrastructure security.\u003c/p\u003e","tags":["AWS","Security","Serverless","Development","Best Practices"],"title":"Securing AWS Lambda Functions: Best Practices and Implementation Guide"},{"categories":["Cloud Computing","Architecture and Design"],"content":"Building robust serverless applications often requires orchestrating multiple Lambda functions into complex workflows. AWS Step Functions provide a visual workflow service that coordinates distributed components, manages state transitions, and handles error recovery—all while maintaining the …","href":"https://scottobert.com/posts/aws-step-functions-typescript/","series":"AWS and Typescript","summary":"\u003cp\u003eBuilding robust serverless applications often requires orchestrating multiple Lambda functions into complex workflows. AWS Step Functions provide a visual workflow service that coordinates distributed components, manages state transitions, and handles error recovery—all while maintaining the reliability and scalability that modern applications demand.\u003c/p\u003e\n\u003ch2 id=\"why-step-functions-with-typescript\"\u003eWhy Step Functions with TypeScript?\u003c/h2\u003e\n\u003cp\u003eTypeScript brings compelling advantages to Step Functions development beyond basic type safety. \u003cstrong\u003eWorkflow clarity\u003c/strong\u003e emerges from strongly-typed state definitions that make complex logic easier to understand and maintain. \u003cstrong\u003eError prevention\u003c/strong\u003e occurs at compile time through type checking of state inputs and outputs. \u003cstrong\u003eDeveloper experience\u003c/strong\u003e improves dramatically with IntelliSense support for AWS SDK calls and state machine definitions.\u003c/p\u003e","tags":["AWS","TypeScript","Serverless","Development","Architecture"],"title":"AWS Step Functions with TypeScript: Orchestrating Serverless Workflows"},{"categories":["Cloud Computing","Development Tutorials"],"content":"AWS Lambda represents the foundation of serverless computing, allowing you to run code without managing servers. When combined with TypeScript, Lambda functions become more maintainable, reliable, and developer-friendly. This guide will walk you through building production-ready Lambda functions …","href":"https://scottobert.com/posts/aws-lambda-typescript/","series":"AWS and Typescript","summary":"\u003cp\u003eAWS Lambda represents the foundation of serverless computing, allowing you to run code without managing servers. When combined with TypeScript, Lambda functions become more maintainable, reliable, and developer-friendly. This guide will walk you through building production-ready Lambda functions with TypeScript, covering everything from setup to deployment and best practices.\u003c/p\u003e\n\u003ch2 id=\"why-typescript-for-lambda\"\u003eWhy TypeScript for Lambda?\u003c/h2\u003e\n\u003cp\u003eTypeScript brings several compelling advantages to Lambda development. \u003cstrong\u003eType safety\u003c/strong\u003e catches errors at compile time rather than runtime, preventing costly production issues. \u003cstrong\u003eEnhanced developer experience\u003c/strong\u003e includes intelligent autocomplete, refactoring support, and better tooling integration. \u003cstrong\u003eBetter maintainability\u003c/strong\u003e comes from explicit interfaces and self-documenting code that\u0026rsquo;s easier for teams to understand and modify.\u003c/p\u003e","tags":["Development","AWS","Serverless","TypeScript"],"title":"AWS Lambda with TypeScript: A Complete Development Guide"},{"categories":["Version Control","Development Tools"],"content":"Safely Resetting to a Previous Commit in Git When working with Git, sometimes you need to reset your working tree to a specific commit while preserving the commit history. This guide explains how to do this safely and understand what\u0026amp;rsquo;s happening behind the scenes.\nThe Problem Typically, when …","href":"https://scottobert.com/posts/git-reset-to-commit/","series":null,"summary":"\u003ch1 id=\"safely-resetting-to-a-previous-commit-in-git\"\u003eSafely Resetting to a Previous Commit in Git\u003c/h1\u003e\n\u003cp\u003eWhen working with Git, sometimes you need to reset your working tree to a specific commit while preserving the commit history. This guide explains how to do this safely and understand what\u0026rsquo;s happening behind the scenes.\u003c/p\u003e\n\u003ch2 id=\"the-problem\"\u003eThe Problem\u003c/h2\u003e\n\u003cp\u003eTypically, when developers want to revert to an older commit, they might reach for \u003ccode\u003egit reset --hard\u003c/code\u003e. However, this can be dangerous as it:\u003c/p\u003e","tags":["Development","Debugging","Developer Tips"],"title":"git reset to a given commit"},{"categories":["Development Tools","Debugging and Troubleshooting"],"content":"Sometimes as developers we run into a legacy application that has been running in production for years when suddenly a bug surfaces. If nobody knows where the source code for that legacy application is, that can be a huge problem.\nIntroduction to .NET Decompilation Decompilation is the process of …","href":"https://scottobert.com/posts/decompiling-dotnet-apps/","series":null,"summary":"\u003cp\u003eSometimes as developers we run into a legacy application that has been running in production for years when suddenly a bug surfaces. If nobody knows where the source code for that legacy application is, that can be a huge problem.\u003c/p\u003e\n\u003ch2 id=\"introduction-to-net-decompilation\"\u003eIntroduction to .NET Decompilation\u003c/h2\u003e\n\u003cp\u003eDecompilation is the process of converting compiled .NET assemblies (DLLs or EXEs) back into readable source code. This can be incredibly useful when:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eDealing with legacy applications without source code\u003c/li\u003e\n\u003cli\u003eDebugging production issues where deployed code differs from source control\u003c/li\u003e\n\u003cli\u003eUnderstanding third-party libraries when documentation is insufficient\u003c/li\u003e\n\u003cli\u003eInvestigating potential security issues or malware\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"using-dotpeek\"\u003eUsing dotPeek\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://www.jetbrains.com/decompiler/\"\u003edotPeek\u003c/a\u003e by JetBrains is a powerful free .NET decompiler that can help solve these problems. I recently had an occasion to use it, and even without the .pdb file, it was able to decompile the code to be very close to the source code we had in source control that we knew wasn\u0026rsquo;t what was running in production.\u003c/p\u003e","tags":["Development","Debugging","Developer Tips"],"title":"Decompiling dotnet apps"},{"categories":["Software Development","Code Quality","Technical Debt"],"content":"Introduction In our Modern Development Practices series, we\u0026amp;rsquo;ve explored test-driven development, code quality gates, API design patterns, microservices communication, database design, and performance testing. Today, we conclude with technical debt management – the critical practice that …","href":"https://scottobert.com/posts/technical-debt-management-growing-codebases/","series":"Modern Development Practices","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn our Modern Development Practices series, we\u0026rsquo;ve explored test-driven development, code quality gates, API design patterns, microservices communication, database design, and performance testing. Today, we conclude with technical debt management – the critical practice that determines whether your codebase remains maintainable and scalable as it grows.\u003c/p\u003e\n\u003cp\u003eTechnical debt accumulates naturally in all software projects. The key is not to eliminate it entirely (which is impossible) but to manage it strategically, making conscious decisions about when to incur debt and when to pay it down.\u003c/p\u003e","tags":["Technical Debt","Refactoring","Code Quality","Metrics","TypeScript","Automation"],"title":"Technical Debt Management in Growing Codebases: Strategies for Sustainable Development"},{"categories":["Software Development","Performance","Testing"],"content":"Introduction In our Modern Development Practices series, we\u0026amp;rsquo;ve explored test-driven development, code quality gates, API design patterns, microservices communication, and database design. Today, we\u0026amp;rsquo;re focusing on performance testing strategies for cloud applications – a critical practice …","href":"https://scottobert.com/posts/performance-testing-strategies-cloud-applications/","series":"Modern Development Practices","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn our Modern Development Practices series, we\u0026rsquo;ve explored test-driven development, code quality gates, API design patterns, microservices communication, and database design. Today, we\u0026rsquo;re focusing on performance testing strategies for cloud applications – a critical practice for ensuring your systems can handle real-world load and scale gracefully.\u003c/p\u003e\n\u003cp\u003eCloud applications present unique challenges for performance testing: auto-scaling behaviors, distributed architectures, and pay-per-use pricing models all require specialized testing approaches. We\u0026rsquo;ll explore comprehensive strategies from unit-level performance tests to large-scale load testing and chaos engineering.\u003c/p\u003e","tags":["Performance Testing","Load Testing","AWS","Monitoring","Chaos Engineering","TypeScript"],"title":"Performance Testing Strategies for Cloud Applications: Load Testing at Scale"},{"categories":["Software Development","Database","Serverless"],"content":"Introduction In our Modern Development Practices series, we\u0026amp;rsquo;ve covered test-driven development, code quality gates, API design patterns, and microservices communication. Today, we\u0026amp;rsquo;re diving into database design for serverless applications – a critical aspect that can make or break your …","href":"https://scottobert.com/posts/database-design-serverless-applications/","series":"Modern Development Practices","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn our Modern Development Practices series, we\u0026rsquo;ve covered test-driven development, code quality gates, API design patterns, and microservices communication. Today, we\u0026rsquo;re diving into database design for serverless applications – a critical aspect that can make or break your application\u0026rsquo;s performance, scalability, and cost-effectiveness.\u003c/p\u003e\n\u003cp\u003eServerless applications demand a different approach to data storage. Traditional relational database patterns often don\u0026rsquo;t align with the ephemeral, stateless nature of serverless functions. Instead, we need to embrace NoSQL patterns, denormalization strategies, and event-driven data synchronization.\u003c/p\u003e","tags":["DynamoDB","NoSQL","Serverless","AWS","Database Design","Data Modeling","TypeScript"],"title":"Database Design for Serverless Applications: NoSQL Patterns and Data Modeling"},{"categories":["Software Development","Architecture","Microservices"],"content":"Introduction In our Modern Development Practices series, we\u0026amp;rsquo;ve explored test-driven development, code quality gates, and API design patterns. Today, we\u0026amp;rsquo;re diving into microservices communication patterns – the backbone of any successful distributed system. Effective communication between …","href":"https://scottobert.com/posts/microservices-communication-patterns/","series":"Modern Development Practices","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eIn our Modern Development Practices series, we\u0026rsquo;ve explored test-driven development, code quality gates, and API design patterns. Today, we\u0026rsquo;re diving into microservices communication patterns – the backbone of any successful distributed system. Effective communication between services determines the resilience, scalability, and maintainability of your entire architecture.\u003c/p\u003e\n\u003ch2 id=\"synchronous-communication-patterns\"\u003eSynchronous Communication Patterns\u003c/h2\u003e\n\u003ch3 id=\"httprest-with-circuit-breaker-pattern\"\u003eHTTP/REST with Circuit Breaker Pattern\u003c/h3\u003e\n\u003cp\u003eThe most common synchronous pattern uses HTTP/REST calls with resilience mechanisms:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-typescript\" data-lang=\"typescript\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003einterface\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eCircuitBreakerConfig\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003efailureThreshold\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003enumber\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003eresetTimeout\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003enumber\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003emonitoringPeriod\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003enumber\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eCircuitBreaker\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003estate\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;CLOSED\u0026#39;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;OPEN\u0026#39;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e|\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;HALF_OPEN\u0026#39;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;CLOSED\u0026#39;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003efailureCount\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003elastFailureTime?\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003eDate\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003econstructor\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003econfig\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003eCircuitBreakerConfig\u003c/span\u003e) {}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003easync\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eexecute\u003c/span\u003e\u0026lt;\u003cspan style=\"color:#f92672\"\u003eT\u003c/span\u003e\u0026gt;(\u003cspan style=\"color:#a6e22e\"\u003eoperation\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e () \u003cspan style=\"color:#f92672\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ePromise\u003c/span\u003e\u0026lt;\u003cspan style=\"color:#f92672\"\u003eT\u003c/span\u003e\u0026gt;)\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ePromise\u003c/span\u003e\u0026lt;\u003cspan style=\"color:#f92672\"\u003eT\u003c/span\u003e\u0026gt; {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003ethis\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003estate\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e===\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;OPEN\u0026#39;\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003ethis\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eshouldAttemptReset\u003c/span\u003e()) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ethis\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003estate\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;HALF_OPEN\u0026#39;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      } \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ethrow\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e Error(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;Circuit breaker is OPEN\u0026#39;\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003etry\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eresult\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eawait\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eoperation\u003c/span\u003e();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#66d9ef\"\u003ethis\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eonSuccess\u003c/span\u003e();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eresult\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    } \u003cspan style=\"color:#66d9ef\"\u003ecatch\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003eerror\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#66d9ef\"\u003ethis\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eonFailure\u003c/span\u003e();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#66d9ef\"\u003ethrow\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eerror\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eonSuccess\u003c/span\u003e()\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ethis\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003efailureCount\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ethis\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003estate\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;CLOSED\u0026#39;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eonFailure\u003c/span\u003e()\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ethis\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003efailureCount\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ethis\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003elastFailureTime\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e Date();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003ethis\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003efailureCount\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026gt;=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003ethis\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003econfig\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003efailureThreshold\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#66d9ef\"\u003ethis\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003estate\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;OPEN\u0026#39;\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eshouldAttemptReset\u003c/span\u003e()\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eboolean\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003enow\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e Date();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etimeSinceLastFailure\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003enow\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003egetTime\u003c/span\u003e() \u003cspan style=\"color:#f92672\"\u003e-\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003ethis\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003elastFailureTime\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e?\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003egetTime\u003c/span\u003e() \u003cspan style=\"color:#f92672\"\u003e||\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etimeSinceLastFailure\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026gt;=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003ethis\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003econfig\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eresetTimeout\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// Usage in a service client\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eUserServiceClient\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecircuitBreaker\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003eCircuitBreaker\u003c/span\u003e;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003econstructor\u003c/span\u003e() {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ethis\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ecircuitBreaker\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eCircuitBreaker\u003c/span\u003e({\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#a6e22e\"\u003efailureThreshold\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003e5\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#a6e22e\"\u003eresetTimeout\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003e60000\u003c/span\u003e, \u003cspan style=\"color:#75715e\"\u003e// 1 minute\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e      \u003cspan style=\"color:#a6e22e\"\u003emonitoringPeriod\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003e10000\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e// 10 seconds\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e    });\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#66d9ef\"\u003easync\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003egetUser\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003euserId\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e)\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ePromise\u003c/span\u003e\u0026lt;\u003cspan style=\"color:#f92672\"\u003eUser\u003c/span\u003e\u0026gt; {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003ethis\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ecircuitBreaker\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eexecute\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003easync\u003c/span\u003e () \u003cspan style=\"color:#f92672\"\u003e=\u0026gt;\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eresponse\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eawait\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003efetch\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e`\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e${\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003ethis\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ebaseUrl\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e/users/\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e${\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003euserId\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e`\u003c/span\u003e, {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003etimeout\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003e5000\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003eheaders\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e          \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;Content-Type\u0026#39;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;application/json\u0026#39;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e          \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;Authorization\u0026#39;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e`Bearer \u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e${\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003ethis\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eauthToken\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e`\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      });\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#f92672\"\u003e!\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eresponse\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eok\u003c/span\u003e) {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#66d9ef\"\u003ethrow\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e Error(\u003cspan style=\"color:#e6db74\"\u003e`Failed to fetch user: \u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e${\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003eresponse\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003estatusText\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e`\u003c/span\u003e);\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eresponse\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ejson\u003c/span\u003e();\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    });\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"request-response-with-retry-and-timeout\"\u003eRequest-Response with Retry and Timeout\u003c/h3\u003e\n\u003cp\u003eImplement robust retry mechanisms with exponential backoff:\u003c/p\u003e","tags":["Microservices","TypeScript","AWS","Event-Driven Architecture","Communication Patterns","Distributed Systems"],"title":"Microservices Communication Patterns: Building Resilient Distributed Systems"},{"categories":["Software Development","Architecture and Design"],"content":"Modern API design has evolved far beyond simple CRUD operations. Today\u0026amp;rsquo;s applications require APIs that are resilient, scalable, and developer-friendly while supporting diverse client needs and complex business workflows. This guide explores proven patterns that address these challenges. …","href":"https://scottobert.com/posts/api-design-patterns-modern-applications/","series":"Modern Development Practices","summary":"\u003cp\u003eModern API design has evolved far beyond simple CRUD operations. Today\u0026rsquo;s applications require APIs that are resilient, scalable, and developer-friendly while supporting diverse client needs and complex business workflows. This guide explores proven patterns that address these challenges.\u003c/p\u003e\n\u003ch2 id=\"foundational-design-principles\"\u003eFoundational Design Principles\u003c/h2\u003e\n\u003ch3 id=\"api-first-development\"\u003eAPI-First Development\u003c/h3\u003e\n\u003cp\u003eDesign your API before implementation to ensure consistency and usability:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-typescript\" data-lang=\"typescript\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// Define API contract first\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003einterface\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eUserAPI\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#75715e\"\u003e// Resource operations\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e  \u003cspan style=\"color:#a6e22e\"\u003egetUser\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eid\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e)\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ePromise\u003c/span\u003e\u0026lt;\u003cspan style=\"color:#f92672\"\u003eUser\u003c/span\u003e\u0026gt;;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003eupdateUser\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eid\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eupdates\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003ePartial\u003c/span\u003e\u0026lt;\u003cspan style=\"color:#f92672\"\u003eUser\u003c/span\u003e\u0026gt;)\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ePromise\u003c/span\u003e\u0026lt;\u003cspan style=\"color:#f92672\"\u003eUser\u003c/span\u003e\u0026gt;;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003edeleteUser\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eid\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e)\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ePromise\u003c/span\u003e\u0026lt;\u003cspan style=\"color:#f92672\"\u003evoid\u003c/span\u003e\u0026gt;;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#75715e\"\u003e// Collection operations\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e  \u003cspan style=\"color:#a6e22e\"\u003elistUsers\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003efilters\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003eUserFilters\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003epagination\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003ePagination\u003c/span\u003e)\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ePromise\u003c/span\u003e\u0026lt;\u003cspan style=\"color:#f92672\"\u003ePagedResult\u003c/span\u003e\u0026lt;\u003cspan style=\"color:#f92672\"\u003eUser\u003c/span\u003e\u0026gt;\u0026gt;;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003esearchUsers\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003equery\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003eSearchQuery\u003c/span\u003e)\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ePromise\u003c/span\u003e\u0026lt;\u003cspan style=\"color:#f92672\"\u003eSearchResult\u003c/span\u003e\u0026lt;\u003cspan style=\"color:#f92672\"\u003eUser\u003c/span\u003e\u0026gt;\u0026gt;;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#75715e\"\u003e// Business operations\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e  \u003cspan style=\"color:#a6e22e\"\u003eactivateUser\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eid\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e)\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ePromise\u003c/span\u003e\u0026lt;\u003cspan style=\"color:#f92672\"\u003eUser\u003c/span\u003e\u0026gt;;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003edeactivateUser\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eid\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e)\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ePromise\u003c/span\u003e\u0026lt;\u003cspan style=\"color:#f92672\"\u003eUser\u003c/span\u003e\u0026gt;;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003eresetUserPassword\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eid\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e)\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ePromise\u003c/span\u003e\u0026lt;\u003cspan style=\"color:#f92672\"\u003evoid\u003c/span\u003e\u0026gt;;\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e}\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e// OpenAPI specification (generated or hand-written)\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003econst\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003euserAPISpec\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003eopenapi\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;3.0.0\u0026#39;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003einfo\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003etitle\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;User Management API\u0026#39;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#a6e22e\"\u003eversion\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;1.0.0\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  },\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  \u003cspan style=\"color:#a6e22e\"\u003epaths\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;/users/{id}\u0026#39;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      \u003cspan style=\"color:#66d9ef\"\u003eget\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003esummary\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;Get user by ID\u0026#39;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003eparameters\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e [\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e          {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003ename\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;id\u0026#39;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#66d9ef\"\u003ein\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;path\u0026#39;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003erequired\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003etrue\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003eschema\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e { \u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;string\u0026#39;\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eformat\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;uuid\u0026#39;\u003c/span\u003e }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e          }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        ],\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        \u003cspan style=\"color:#a6e22e\"\u003eresponses\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e          \u003cspan style=\"color:#ae81ff\"\u003e200\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003edescription\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;User found\u0026#39;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003econtent\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e              \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;application/json\u0026#39;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#a6e22e\"\u003eschema\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e { \u003cspan style=\"color:#a6e22e\"\u003e$ref\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;#/components/schemas/User\u0026#39;\u003c/span\u003e }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e              }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e          },\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e          \u003cspan style=\"color:#ae81ff\"\u003e404\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003edescription\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;User not found\u0026#39;\u003c/span\u003e,\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            \u003cspan style=\"color:#a6e22e\"\u003econtent\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e              \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;application/json\u0026#39;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e {\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e                \u003cspan style=\"color:#a6e22e\"\u003eschema\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e { \u003cspan style=\"color:#a6e22e\"\u003e$ref\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;#/components/schemas/Error\u0026#39;\u003c/span\u003e }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e              }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e            }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e          }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e        }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e      }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e    }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e  }\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e};\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"resource-oriented-design\"\u003eResource-Oriented Design\u003c/h3\u003e\n\u003cp\u003eStructure APIs around resources, not actions:\u003c/p\u003e","tags":["API Design","REST","GraphQL","Architecture","Best Practices"],"title":"API Design Patterns for Modern Applications"},{"categories":["Software Development","Quality Assurance"],"content":"Code quality gates serve as automated checkpoints that prevent substandard code from progressing through your development pipeline. When implemented effectively, they maintain consistent standards across teams while accelerating development by catching issues early and reducing manual review …","href":"https://scottobert.com/posts/code-quality-gates-automated-standards-enforcement/","series":"Modern Development Practices","summary":"\u003cp\u003eCode quality gates serve as automated checkpoints that prevent substandard code from progressing through your development pipeline. When implemented effectively, they maintain consistent standards across teams while accelerating development by catching issues early and reducing manual review overhead.\u003c/p\u003e\n\u003ch2 id=\"understanding-quality-gates\"\u003eUnderstanding Quality Gates\u003c/h2\u003e\n\u003cp\u003eQuality gates are automated checks that evaluate code against predefined criteria before allowing it to proceed to the next stage of development. Unlike simple linting, quality gates encompass comprehensive analysis including code coverage, complexity metrics, security vulnerabilities, and architectural compliance.\u003c/p\u003e","tags":["Code Quality","Automation","CI/CD","Development","Standards"],"title":"Code Quality Gates: Automated Standards Enforcement"},{"categories":["Software Development","Testing"],"content":"Test-Driven Development (TDD) has evolved significantly with modern TypeScript tooling and frameworks. While most developers understand the basic red-green-refactor cycle, mastering TDD in TypeScript requires understanding advanced patterns, effective mocking strategies, and leveraging the type …","href":"https://scottobert.com/posts/test-driven-development-typescript-beyond-basics/","series":"Modern Development Practices","summary":"\u003cp\u003eTest-Driven Development (TDD) has evolved significantly with modern TypeScript tooling and frameworks. While most developers understand the basic red-green-refactor cycle, mastering TDD in TypeScript requires understanding advanced patterns, effective mocking strategies, and leveraging the type system for better test design.\u003c/p\u003e\n\u003ch2 id=\"beyond-basic-tdd-advanced-patterns\"\u003eBeyond Basic TDD: Advanced Patterns\u003c/h2\u003e\n\u003ch3 id=\"type-driven-test-design\"\u003eType-Driven Test Design\u003c/h3\u003e\n\u003cp\u003eTypeScript\u0026rsquo;s type system provides unique opportunities to improve test design. Instead of just testing implementation details, we can use types to guide our test structure and ensure comprehensive coverage:\u003c/p\u003e","tags":["TypeScript","Testing","TDD","Development","Best Practices"],"title":"Test-Driven Development in TypeScript: Beyond the Basics"},{"categories":["Cloud Computing","Data Engineering"],"content":"Real-time processing architectures address the fundamental challenge of extracting actionable insights from continuously flowing data streams while maintaining low latency and high throughput requirements. Unlike batch processing systems that operate on static datasets with relaxed timing …","href":"https://scottobert.com/posts/real-time-processing-architectures/","series":"Cloud Architecture Patterns","summary":"\u003cp\u003eReal-time processing architectures address the fundamental challenge of extracting actionable insights from continuously flowing data streams while maintaining low latency and high throughput requirements. Unlike batch processing systems that operate on static datasets with relaxed timing constraints, real-time systems must process events as they arrive, often within milliseconds or seconds of generation. This temporal sensitivity introduces unique design considerations around event ordering, backpressure handling, and state management that distinguish real-time architectures from their batch-oriented counterparts.\u003c/p\u003e","tags":["AWS","Real-time","Kinesis","Lambda","Stream Processing","Architecture"],"title":"Real-time Processing Architectures"},{"categories":["Cloud Computing","Data Engineering"],"content":"Data lake architectures represent a fundamental departure from traditional data warehousing approaches, embracing schema-on-read principles and polyglot storage strategies that accommodate the velocity, variety, and volume characteristics of modern data ecosystems. Unlike data warehouses that …","href":"https://scottobert.com/posts/data-lake-architecture-aws/","series":"Cloud Architecture Patterns","summary":"\u003cp\u003eData lake architectures represent a fundamental departure from traditional data warehousing approaches, embracing schema-on-read principles and polyglot storage strategies that accommodate the velocity, variety, and volume characteristics of modern data ecosystems. Unlike data warehouses that require upfront schema definition and ETL processes to conform data to predefined structures, data lakes preserve raw data in its native format while providing flexible analysis capabilities that adapt to evolving analytical requirements. AWS provides a comprehensive suite of services that enable sophisticated data lake implementations while managing the operational complexity traditionally associated with big data platforms.\u003c/p\u003e","tags":["AWS","Data Lake","S3","Glue","Athena","Data Architecture"],"title":"Data Lake Architecture with AWS"},{"categories":["Cloud Computing","Architecture and Design"],"content":"Resilience engineering represents a paradigm shift from trying to prevent all failures to designing systems that gracefully adapt and recover when failures inevitably occur. Traditional approaches focused on eliminating failure modes through redundancy and robust design, but complex distributed …","href":"https://scottobert.com/posts/resilience-engineering-building-fault-tolerant-systems/","series":"Cloud Architecture Patterns","summary":"\u003cp\u003eResilience engineering represents a paradigm shift from trying to prevent all failures to designing systems that gracefully adapt and recover when failures inevitably occur. Traditional approaches focused on eliminating failure modes through redundancy and robust design, but complex distributed systems exhibit emergent behaviors that cannot be fully predicted or prevented. Instead, resilient systems embrace failure as a normal operating condition and build adaptive capabilities that maintain essential functions even under adverse conditions.\u003c/p\u003e","tags":["AWS","Resilience","Fault Tolerance","Reliability","Chaos Engineering"],"title":"Resilience Engineering: Building Fault-Tolerant Systems"},{"categories":null,"content":"Distributed systems present unique challenges that require thoughtful application of proven design patterns to achieve reliability, scalability, and maintainability. Unlike monolithic applications where components communicate through in-process method calls, distributed systems must handle network …","href":"https://scottobert.com/posts/distributed-system-design-patterns/","series":"Cloud Architecture Patterns","summary":"\u003cp\u003eDistributed systems present unique challenges that require thoughtful application of proven design patterns to achieve reliability, scalability, and maintainability. Unlike monolithic applications where components communicate through in-process method calls, distributed systems must handle network partitions, variable latency, and partial failures as fundamental aspects of their operation. The patterns that emerge from these constraints form the foundation of robust cloud architectures, particularly when implemented using AWS\u0026rsquo;s managed services ecosystem.\u003c/p\u003e\n\u003cdiv class=\"plantuml-container\"\u003e\n  \u003cimg id=\"plantuml-circuit-breaker\" class=\"plantuml-diagram\"/\u003e\n  \u003ca id=\"plantuml-link-circuit-breaker\" href=\"#\" target=\"_blank\" class=\"plantuml-link\" title=\"Open diagram in new window\"\u003e\n    \u003cspan class=\"plantuml-link-icon\"\u003e🔍\u003c/span\u003e\n  \u003c/a\u003e\n\u003c/div\u003e\n\u003cscript src=\"/js/rawdeflate.js\"\u003e\u003c/script\u003e\n\u003cscript\u003e\n  \n\n  function encode64(data) {\n    r = \"\";\n    for (i=0; i\u003cdata.length; i+=3) {\n      if (i+2==data.length) {\n        r +=append3bytes(data.charCodeAt(i), data.charCodeAt(i+1), 0);\n      } else if (i+1==data.length) {\n        r += append3bytes(data.charCodeAt(i), 0, 0);\n      } else {\n        r += append3bytes(data.charCodeAt(i), data.charCodeAt(i+1),\n            data.charCodeAt(i+2));\n      }\n    }\n    return r;\n  }\n\n  function append3bytes(b1, b2, b3) {\n    c1 = b1 \u003e\u003e 2;\n    c2 = ((b1 \u0026 0x3) \u003c\u003c 4) | (b2 \u003e\u003e 4);\n    c3 = ((b2 \u0026 0xF) \u003c\u003c 2) | (b3 \u003e\u003e 6);\n    c4 = b3 \u0026 0x3F;\n    r = \"\";\n    r += encode6bit(c1 \u0026 0x3F);\n    r += encode6bit(c2 \u0026 0x3F);\n    r += encode6bit(c3 \u0026 0x3F);\n    r += encode6bit(c4 \u0026 0x3F);\n    return r;\n  }\n\n  function encode6bit(b) {\n    if (b \u003c 10) {\n      return String.fromCharCode(48 + b);\n    }\n    b -= 10;\n    if (b \u003c 26) {\n      return String.fromCharCode(65 + b);\n    }\n    b -= 26;\n    if (b \u003c 26) {\n      return String.fromCharCode(97 + b);\n    }\n    b -= 26;\n    if (b == 0) {\n      return '-';\n    }\n    if (b == 1) {\n      return '_';\n    }\n    return '?';\n  }\n\n  var deflater = window.SharedWorker \u0026\u0026 new SharedWorker('/js/rawdeflate.js');\n  if (deflater) {\n    deflater.port.addEventListener('message', done_deflating, false);\n    deflater.port.start();\n  } else if (window.Worker) {\n    deflater = new Worker('/js/rawdeflate.js');\n    deflater.onmessage = done_deflating;\n  }\n\n  function done_deflating(e) {\n    const img = document.getElementById(\"plantuml-circuit-breaker\");\n    const imgUrl = \"https://www.plantuml.com/plantuml/img/\"+encode64(e.data);\n    img.src = imgUrl;\n    \n    \n    const link = document.getElementById(\"plantuml-link-circuit-breaker\");\n    if (link) {\n      link.href = imgUrl;\n    }\n  }\n\n  function compress(s) {\n    \n    s = unescape(encodeURIComponent(s));\n  \n    if (deflater) {\n      if (deflater.port \u0026\u0026 deflater.port.postMessage) {\n        deflater.port.postMessage(s);\n      } else {\n        deflater.postMessage(s);\n      }\n    } else {\n      setTimeout(function() {\n          done_deflating({ data: deflate(s) });\n          }, 100);\n    }\n  }\n\n  compress(\"\\n@startuml Circuit Breaker Pattern\\n!define AWSPuml https:\\/\\/raw.githubusercontent.com\\/awslabs\\/aws-icons-for-plantuml\\/v14.0\\/dist\\n!include AWSPuml\\/AWSCommon.puml\\n!include AWSPuml\\/Compute\\/Lambda.puml\\n!include AWSPuml\\/Database\\/DynamoDBTable.puml\\n!include AWSPuml\\/ApplicationIntegration\\/APIGateway.puml\\n!include AWSPuml\\/ApplicationIntegration\\/SimpleQueueServiceQueue.puml\\n!include AWSPuml\\/ApplicationIntegration\\/SimpleNotificationServiceTopic.puml\\n\\nskinparam BackgroundColor transparent\\nskinparam componentStyle rectangle\\nskinparam defaultTextAlignment center\\n\\npackage \\u0022Circuit Breaker Pattern Implementation\\u0022 {\\n  component \\u0022API Gateway\\u0022 as api #LightBlue\\n  component \\u0022Lambda Function\\u0022 as lambda #LightBlue\\n  component \\u0022Circuit Breaker State\\u0022 as state #Orange\\n  database \\u0022DynamoDB\\u0022 as dynamodb #LightGreen\\n  component \\u0022External Service\\u0022 as external #Pink\\n  queue \\u0022Fallback Queue\\u0022 as fallbackQueue #LightYellow\\n  component \\u0022SNS Notification\\u0022 as notification #LightCyan\\n}\\n\\nnote right of state\\nStates:\\n\\n- Closed: Normal operation\\n- Open: Failing fast\\n- Half-Open: Testing recovery\\nend note\\n\\napi --\\u003e lambda : 1. Client Request\\nlambda --\\u003e state : 2. Check circuit state\\nstate --\\u003e dynamodb : 3. Read\\/Update state\\nstate -\\u003e external : 4a. If Closed\\/Half-Open: Call service\\nstate --\\u003e fallbackQueue : 4b. If Open: Use fallback\\nexternal --\\u003e state : 5. Update success\\/failure count\\nstate --\\u003e notification : 6. Circuit state change notification\\n\\nnote bottom of lambda\\nTracks:\\n\\n- Failure count\\n- Error threshold\\n- Reset timeout\\n- Last failure timestamp\\nend note\\n\\n@enduml\\n\")\n\u003c/script\u003e\n\u003cp\u003eThe Circuit Breaker pattern addresses one of the most common failure modes in distributed systems: cascading failures caused by unhealthy dependencies. When a downstream service becomes unresponsive, continuing to send requests not only wastes resources but can propagate the failure upstream. A circuit breaker monitors failure rates and response times, automatically switching to an open state when thresholds are exceeded. AWS Application Load Balancer\u0026rsquo;s health checking mechanisms provide a managed implementation of this pattern, automatically removing unhealthy targets from rotation and gradually reintroducing them as they recover.\u003c/p\u003e","tags":["AWS","Distributed Systems","Microservices","Patterns","Resilience"],"title":"Distributed System Design Patterns in AWS"},{"categories":["Cloud Computing","Architecture and Design"],"content":"Command Query Responsibility Segregation represents a fundamental shift in how we think about data persistence and retrieval in distributed systems. Rather than treating reads and writes as symmetric operations against a single data model, CQRS acknowledges the inherent differences between these …","href":"https://scottobert.com/posts/cqrs-implementation-aws-services/","series":"Cloud Architecture Patterns","summary":"\u003cp\u003eCommand Query Responsibility Segregation represents a fundamental shift in how we think about data persistence and retrieval in distributed systems. Rather than treating reads and writes as symmetric operations against a single data model, CQRS acknowledges the inherent differences between these operations and optimizes each path independently. In the context of AWS services, this pattern becomes particularly powerful when we leverage the managed services ecosystem to handle the complexity of maintaining separate command and query models.\u003c/p\u003e","tags":["AWS","CQRS","DynamoDB","Lambda","EventBridge","Architecture"],"title":"CQRS Implementation with AWS Services"},{"categories":["Cloud Computing","Architecture and Design"],"content":"Event sourcing fundamentally changes how applications handle state management by storing every state change as an immutable event rather than maintaining current state snapshots. This architectural pattern becomes particularly powerful when implemented on AWS, where managed services provide the …","href":"https://scottobert.com/posts/event-sourcing-patterns-aws/","series":"Cloud Architecture Patterns","summary":"\u003cp\u003eEvent sourcing fundamentally changes how applications handle state management by storing every state change as an immutable event rather than maintaining current state snapshots. This architectural pattern becomes particularly powerful when implemented on AWS, where managed services provide the scalability and durability required for enterprise-grade event sourcing systems. Understanding how to leverage AWS services effectively for event sourcing can transform application architectures from brittle state-dependent systems into resilient, audit-friendly, and highly scalable solutions.\u003c/p\u003e","tags":["AWS","Event Sourcing","Architecture","DynamoDB","EventBridge","Best Practices"],"title":"Event Sourcing Patterns in AWS"},{"categories":["Cloud Computing","Architecture and Design"],"content":"Enterprise organizations face unique challenges when scaling their AWS infrastructure beyond simple single-account deployments. As applications grow in complexity and regulatory requirements become more stringent, the need for sophisticated multi-account strategies becomes paramount. This …","href":"https://scottobert.com/posts/multi-account-aws-strategies-enterprise-applications/","series":"Cloud Architecture Patterns","summary":"\u003cp\u003eEnterprise organizations face unique challenges when scaling their AWS infrastructure beyond simple single-account deployments. As applications grow in complexity and regulatory requirements become more stringent, the need for sophisticated multi-account strategies becomes paramount. This exploration delves into proven patterns that enable organizations to maintain security, compliance, and operational efficiency across distributed cloud environments.\u003c/p\u003e\n\u003cdiv class=\"plantuml-container\"\u003e\n  \u003cimg id=\"plantuml-multi-account-architecture\" class=\"plantuml-diagram\"/\u003e\n  \u003ca id=\"plantuml-link-multi-account-architecture\" href=\"#\" target=\"_blank\" class=\"plantuml-link\" title=\"Open diagram in new window\"\u003e\n    \u003cspan class=\"plantuml-link-icon\"\u003e🔍\u003c/span\u003e\n  \u003c/a\u003e\n\u003c/div\u003e\n\u003cscript src=\"/js/rawdeflate.js\"\u003e\u003c/script\u003e\n\u003cscript\u003e\n  \n\n  function encode64(data) {\n    r = \"\";\n    for (i=0; i\u003cdata.length; i+=3) {\n      if (i+2==data.length) {\n        r +=append3bytes(data.charCodeAt(i), data.charCodeAt(i+1), 0);\n      } else if (i+1==data.length) {\n        r += append3bytes(data.charCodeAt(i), 0, 0);\n      } else {\n        r += append3bytes(data.charCodeAt(i), data.charCodeAt(i+1),\n            data.charCodeAt(i+2));\n      }\n    }\n    return r;\n  }\n\n  function append3bytes(b1, b2, b3) {\n    c1 = b1 \u003e\u003e 2;\n    c2 = ((b1 \u0026 0x3) \u003c\u003c 4) | (b2 \u003e\u003e 4);\n    c3 = ((b2 \u0026 0xF) \u003c\u003c 2) | (b3 \u003e\u003e 6);\n    c4 = b3 \u0026 0x3F;\n    r = \"\";\n    r += encode6bit(c1 \u0026 0x3F);\n    r += encode6bit(c2 \u0026 0x3F);\n    r += encode6bit(c3 \u0026 0x3F);\n    r += encode6bit(c4 \u0026 0x3F);\n    return r;\n  }\n\n  function encode6bit(b) {\n    if (b \u003c 10) {\n      return String.fromCharCode(48 + b);\n    }\n    b -= 10;\n    if (b \u003c 26) {\n      return String.fromCharCode(65 + b);\n    }\n    b -= 26;\n    if (b \u003c 26) {\n      return String.fromCharCode(97 + b);\n    }\n    b -= 26;\n    if (b == 0) {\n      return '-';\n    }\n    if (b == 1) {\n      return '_';\n    }\n    return '?';\n  }\n\n  var deflater = window.SharedWorker \u0026\u0026 new SharedWorker('/js/rawdeflate.js');\n  if (deflater) {\n    deflater.port.addEventListener('message', done_deflating, false);\n    deflater.port.start();\n  } else if (window.Worker) {\n    deflater = new Worker('/js/rawdeflate.js');\n    deflater.onmessage = done_deflating;\n  }\n\n  function done_deflating(e) {\n    const img = document.getElementById(\"plantuml-multi-account-architecture\");\n    const imgUrl = \"https://www.plantuml.com/plantuml/img/\"+encode64(e.data);\n    img.src = imgUrl;\n    \n    \n    const link = document.getElementById(\"plantuml-link-multi-account-architecture\");\n    if (link) {\n      link.href = imgUrl;\n    }\n  }\n\n  function compress(s) {\n    \n    s = unescape(encodeURIComponent(s));\n  \n    if (deflater) {\n      if (deflater.port \u0026\u0026 deflater.port.postMessage) {\n        deflater.port.postMessage(s);\n      } else {\n        deflater.postMessage(s);\n      }\n    } else {\n      setTimeout(function() {\n          done_deflating({ data: deflate(s) });\n          }, 100);\n    }\n  }\n\n  compress(\"\\n@startuml\\n!theme aws-orange\\ntitle Multi-Account AWS Architecture Pattern\\n\\npackage \\u0022Management Account\\u0022 {\\n  [AWS Organizations]\\n  [Consolidated Billing]\\n  [AWS SSO]\\n  [CloudTrail (Org)]\\n}\\n\\npackage \\u0022Security Account\\u0022 {\\n  [GuardDuty Master]\\n  [Security Hub]\\n  [Config Aggregator]\\n  [CloudTrail Logs]\\n}\\n\\npackage \\u0022Production Account\\u0022 {\\n  [Application Services]\\n  [RDS Production]\\n  [S3 Production]\\n}\\n\\npackage \\u0022Development Account\\u0022 {\\n  [Dev Services]\\n  [RDS Dev]\\n  [S3 Dev]\\n}\\n\\npackage \\u0022Shared Services Account\\u0022 {\\n  [Transit Gateway]\\n  [DNS Resolution]\\n  [Centralized Logging]\\n}\\n\\n[AWS Organizations] --\\u003e [Security Account]\\n[AWS Organizations] --\\u003e [Production Account]\\n[AWS Organizations] --\\u003e [Development Account]\\n[AWS Organizations] --\\u003e [Shared Services Account]\\n\\n[Transit Gateway] --\\u003e [Production Account]\\n[Transit Gateway] --\\u003e [Development Account]\\n\\n@enduml\\n\")\n\u003c/script\u003e\n\u003ch2 id=\"understanding-the-multi-account-imperative\"\u003eUnderstanding the Multi-Account Imperative\u003c/h2\u003e\n\u003cp\u003eThe traditional approach of housing all resources within a single AWS account quickly becomes untenable for enterprise applications. Security boundaries blur when development, staging, and production workloads share the same account, creating unnecessary risk exposure. Compliance frameworks often mandate strict separation of environments, making single-account architectures insufficient for regulated industries.\u003c/p\u003e","tags":["AWS","Enterprise Architecture","Multi-Account","Security","Best Practices"],"title":"Multi-Account AWS Strategies for Enterprise Applications"},{"categories":["Security","Architecture"],"content":"Threat modeling for cloud applications requires a fundamental rethinking of traditional security assessment approaches because cloud-native architectures introduce unique attack vectors, shared responsibility models, and dynamic infrastructure patterns that weren\u0026amp;rsquo;t present in legacy systems. …","href":"https://scottobert.com/posts/threat-modeling-cloud-applications/","series":"Security in Cloud-Native Applications","summary":"\u003cp\u003eThreat modeling for cloud applications requires a fundamental rethinking of traditional security assessment approaches because cloud-native architectures introduce unique attack vectors, shared responsibility models, and dynamic infrastructure patterns that weren\u0026rsquo;t present in legacy systems. The distributed nature of cloud applications, combined with their rapid deployment cycles and ephemeral infrastructure components, creates a complex threat landscape that must be analyzed systematically to identify potential security vulnerabilities before they can be exploited by malicious actors.\u003c/p\u003e","tags":["ThreatModeling","Security","CloudNative","Architecture","RiskAssessment","SecurityDesign","STRIDE","PASTA","OCTAVE"],"title":"Threat Modeling for Cloud Applications: A Comprehensive Approach to Security Design"},{"categories":["Security","Compliance"],"content":"The traditional approach to compliance, characterized by annual audits and point-in-time assessments, is fundamentally incompatible with the velocity and dynamic nature of cloud-native development practices. Modern applications deploy multiple times per day, infrastructure components scale …","href":"https://scottobert.com/posts/compliance-automation/","series":"Security in Cloud-Native Applications","summary":"\u003cp\u003eThe traditional approach to compliance, characterized by annual audits and point-in-time assessments, is fundamentally incompatible with the velocity and dynamic nature of cloud-native development practices. Modern applications deploy multiple times per day, infrastructure components scale automatically based on demand, and data flows through complex distributed systems that may span multiple cloud providers and geographic regions. This operational reality demands a new approach to compliance that can keep pace with continuous delivery while maintaining rigorous adherence to regulatory requirements.\u003c/p\u003e","tags":["Compliance","Automation","DevSecOps","CloudNative","Governance","GDPR","SOC2","HIPAA","PCI-DSS"],"title":"Compliance Automation: Implementing Continuous Compliance in Cloud-Native Environments"},{"categories":["Security","Cloud Computing"],"content":"The ephemeral nature of containers and serverless functions introduces unique security challenges that traditional application security models weren\u0026amp;rsquo;t designed to address. Unlike long-running virtual machines or physical servers, these workloads exist for minutes, hours, or even seconds, …","href":"https://scottobert.com/posts/container-serverless-security/","series":"Security in Cloud-Native Applications","summary":"\u003cp\u003eThe ephemeral nature of containers and serverless functions introduces unique security challenges that traditional application security models weren\u0026rsquo;t designed to address. Unlike long-running virtual machines or physical servers, these workloads exist for minutes, hours, or even seconds, making traditional security monitoring and patching strategies ineffective. This fundamental shift requires a new approach to security that embraces the transient nature of these workloads while maintaining robust protection against evolving threats.\u003c/p\u003e\n\u003cp\u003eContainer and serverless security operates on the principle that protection must be built into the deployment pipeline rather than applied after deployment. This shift-left approach ensures that security controls are embedded throughout the development lifecycle, from image creation to runtime execution. The challenge lies in balancing security rigor with the speed and agility that containerized and serverless architectures promise to deliver.\u003c/p\u003e","tags":["Security","Containers","Serverless","Docker","Kubernetes","AWS Lambda","DevSecOps","CloudNative"],"title":"Container and Serverless Security: Protecting Ephemeral Workloads"},{"categories":["Security","API Development"],"content":"Application Programming Interfaces (APIs) have become the fundamental building blocks of cloud-native applications, enabling microservices to communicate and external systems to integrate with internal services. However, this increased connectivity and exposure also creates significant security …","href":"https://scottobert.com/posts/api-security-best-practices/","series":"Security in Cloud-Native Applications","summary":"\u003cp\u003eApplication Programming Interfaces (APIs) have become the fundamental building blocks of cloud-native applications, enabling microservices to communicate and external systems to integrate with internal services. However, this increased connectivity and exposure also creates significant security challenges that must be addressed through comprehensive API security strategies. Modern cloud-native applications often expose dozens or hundreds of APIs, each representing a potential attack vector that requires careful security consideration.\u003c/p\u003e\n\u003cp\u003eThe security of APIs in cloud-native environments is particularly complex because these interfaces must balance accessibility with protection, enabling legitimate users and services to interact efficiently while preventing unauthorized access and malicious activities. This challenge is compounded by the dynamic nature of cloud-native deployments, where API endpoints may be created, modified, or destroyed frequently as applications scale and evolve.\u003c/p\u003e","tags":["Security","API Security","OAuth","JWT","Rate Limiting","TypeScript","AWS"],"title":"API Security Best Practices for Cloud-Native Applications"},{"categories":["Security","Cloud Computing"],"content":"The proliferation of microservices and distributed architectures has dramatically increased the complexity of managing sensitive information in cloud-native applications. Database credentials, API keys, encryption keys, and other secrets must be securely stored, distributed, and rotated across …","href":"https://scottobert.com/posts/secrets-management-strategies/","series":"Security in Cloud-Native Applications","summary":"\u003cp\u003eThe proliferation of microservices and distributed architectures has dramatically increased the complexity of managing sensitive information in cloud-native applications. Database credentials, API keys, encryption keys, and other secrets must be securely stored, distributed, and rotated across potentially hundreds of services and environments. Traditional approaches of hardcoding secrets or storing them in configuration files are not only insecure but fundamentally incompatible with the dynamic nature of cloud-native deployments.\u003c/p\u003e\n\u003cp\u003eModern secrets management requires a comprehensive strategy that addresses the entire lifecycle of sensitive information, from generation and distribution to rotation and revocation. This strategy must account for the ephemeral nature of cloud-native workloads, the need for automated operations, and the security requirements of handling sensitive data across network boundaries.\u003c/p\u003e","tags":["Security","Secrets Management","AWS","TypeScript","DevOps","Encryption"],"title":"Secrets Management Strategies for Cloud-Native Applications"},{"categories":["Security","Cloud Computing"],"content":"Modern cloud-native applications face unprecedented challenges in managing user identities and controlling access to resources. The traditional perimeter-based security model has given way to sophisticated identity and access management (IAM) patterns that embrace the distributed nature of cloud …","href":"https://scottobert.com/posts/identity-access-management-patterns/","series":"Security in Cloud-Native Applications","summary":"\u003cp\u003eModern cloud-native applications face unprecedented challenges in managing user identities and controlling access to resources. The traditional perimeter-based security model has given way to sophisticated identity and access management (IAM) patterns that embrace the distributed nature of cloud architectures. Understanding these patterns is crucial for building secure, scalable applications that can adapt to evolving security requirements while maintaining excellent user experiences.\u003c/p\u003e\n\u003ch2 id=\"the-evolution-of-identity-management\"\u003eThe Evolution of Identity Management\u003c/h2\u003e\n\u003cp\u003eCloud-native applications operate in environments where traditional network boundaries have dissolved. Users access applications from various devices and locations, while applications themselves consist of numerous microservices communicating across network boundaries. This distributed architecture demands identity management solutions that can provide consistent security policies across all components while maintaining the flexibility needed for modern development practices.\u003c/p\u003e","tags":["Security","Identity Management","AWS","TypeScript","Authentication","Authorization"],"title":"Identity and Access Management Patterns in Cloud-Native Applications"},{"categories":["Security","Cloud Computing","Architecture and Design"],"content":"The traditional security model of \u0026amp;ldquo;trust but verify\u0026amp;rdquo; has become fundamentally inadequate for modern cloud-native environments. Zero-trust architecture operates on the principle that no entity—whether inside or outside the network perimeter—should be trusted by default. This paradigm …","href":"https://scottobert.com/posts/zero-trust-architecture-implementation/","series":"Security in Cloud-Native Applications","summary":"\u003cp\u003eThe traditional security model of \u0026ldquo;trust but verify\u0026rdquo; has become fundamentally inadequate for modern cloud-native environments. Zero-trust architecture operates on the principle that no entity—whether inside or outside the network perimeter—should be trusted by default. This paradigm shift represents a critical evolution in how we approach security design, particularly as organizations embrace distributed architectures, remote workforces, and multi-cloud strategies.\u003c/p\u003e\n\u003cp\u003eIn cloud-native applications, the concept of a network perimeter has largely dissolved. Services communicate across various networks, containers spin up and down dynamically, and data flows through multiple layers of infrastructure. Zero-trust provides a framework for securing these complex, distributed systems by treating every access request as potentially hostile and requiring explicit verification before granting access to any resource.\u003c/p\u003e","tags":["Security","Zero Trust","AWS","Cloud Native","Architecture","IAM"],"title":"Zero-Trust Architecture Implementation in Cloud-Native Applications"}]